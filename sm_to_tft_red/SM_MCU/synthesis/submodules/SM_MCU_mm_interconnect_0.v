// SM_MCU_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2014.09.05.11:33:56

`timescale 1 ps / 1 ps
module SM_MCU_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                     //                           clk_clk.clk
		input  wire        CPU_reset_n_reset_bridge_in_reset_reset,         // CPU_reset_n_reset_bridge_in_reset.reset
		input  wire [26:0] CPU_data_master_address,                         //                   CPU_data_master.address
		output wire        CPU_data_master_waitrequest,                     //                                  .waitrequest
		input  wire [3:0]  CPU_data_master_byteenable,                      //                                  .byteenable
		input  wire        CPU_data_master_read,                            //                                  .read
		output wire [31:0] CPU_data_master_readdata,                        //                                  .readdata
		output wire        CPU_data_master_readdatavalid,                   //                                  .readdatavalid
		input  wire        CPU_data_master_write,                           //                                  .write
		input  wire [31:0] CPU_data_master_writedata,                       //                                  .writedata
		input  wire        CPU_data_master_debugaccess,                     //                                  .debugaccess
		input  wire [26:0] CPU_instruction_master_address,                  //            CPU_instruction_master.address
		output wire        CPU_instruction_master_waitrequest,              //                                  .waitrequest
		input  wire        CPU_instruction_master_read,                     //                                  .read
		output wire [31:0] CPU_instruction_master_readdata,                 //                                  .readdata
		output wire        CPU_instruction_master_readdatavalid,            //                                  .readdatavalid
		output wire [8:0]  CPU_jtag_debug_module_address,                   //             CPU_jtag_debug_module.address
		output wire        CPU_jtag_debug_module_write,                     //                                  .write
		output wire        CPU_jtag_debug_module_read,                      //                                  .read
		input  wire [31:0] CPU_jtag_debug_module_readdata,                  //                                  .readdata
		output wire [31:0] CPU_jtag_debug_module_writedata,                 //                                  .writedata
		output wire [3:0]  CPU_jtag_debug_module_byteenable,                //                                  .byteenable
		input  wire        CPU_jtag_debug_module_waitrequest,               //                                  .waitrequest
		output wire        CPU_jtag_debug_module_debugaccess,               //                                  .debugaccess
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,             //       jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,               //                                  .write
		output wire        jtag_uart_avalon_jtag_slave_read,                //                                  .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,            //                                  .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,           //                                  .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,         //                                  .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,          //                                  .chipselect
		output wire [1:0]  LCD_CS_s1_address,                               //                         LCD_CS_s1.address
		output wire        LCD_CS_s1_write,                                 //                                  .write
		input  wire [31:0] LCD_CS_s1_readdata,                              //                                  .readdata
		output wire [31:0] LCD_CS_s1_writedata,                             //                                  .writedata
		output wire        LCD_CS_s1_chipselect,                            //                                  .chipselect
		output wire [1:0]  LCD_DATA_OUT_s1_address,                         //                   LCD_DATA_OUT_s1.address
		output wire        LCD_DATA_OUT_s1_write,                           //                                  .write
		input  wire [31:0] LCD_DATA_OUT_s1_readdata,                        //                                  .readdata
		output wire [31:0] LCD_DATA_OUT_s1_writedata,                       //                                  .writedata
		output wire        LCD_DATA_OUT_s1_chipselect,                      //                                  .chipselect
		output wire [1:0]  LCD_RD_s1_address,                               //                         LCD_RD_s1.address
		output wire        LCD_RD_s1_write,                                 //                                  .write
		input  wire [31:0] LCD_RD_s1_readdata,                              //                                  .readdata
		output wire [31:0] LCD_RD_s1_writedata,                             //                                  .writedata
		output wire        LCD_RD_s1_chipselect,                            //                                  .chipselect
		output wire [1:0]  LCD_RESET_s1_address,                            //                      LCD_RESET_s1.address
		output wire        LCD_RESET_s1_write,                              //                                  .write
		input  wire [31:0] LCD_RESET_s1_readdata,                           //                                  .readdata
		output wire [31:0] LCD_RESET_s1_writedata,                          //                                  .writedata
		output wire        LCD_RESET_s1_chipselect,                         //                                  .chipselect
		output wire [1:0]  LCD_RS_s1_address,                               //                         LCD_RS_s1.address
		output wire        LCD_RS_s1_write,                                 //                                  .write
		input  wire [31:0] LCD_RS_s1_readdata,                              //                                  .readdata
		output wire [31:0] LCD_RS_s1_writedata,                             //                                  .writedata
		output wire        LCD_RS_s1_chipselect,                            //                                  .chipselect
		output wire [1:0]  LCD_WR_s1_address,                               //                         LCD_WR_s1.address
		output wire        LCD_WR_s1_write,                                 //                                  .write
		input  wire [31:0] LCD_WR_s1_readdata,                              //                                  .readdata
		output wire [31:0] LCD_WR_s1_writedata,                             //                                  .writedata
		output wire        LCD_WR_s1_chipselect,                            //                                  .chipselect
		output wire [9:0]  onchip_memory_s1_address,                        //                  onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                          //                                  .write
		input  wire [31:0] onchip_memory_s1_readdata,                       //                                  .readdata
		output wire [31:0] onchip_memory_s1_writedata,                      //                                  .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                     //                                  .byteenable
		output wire        onchip_memory_s1_chipselect,                     //                                  .chipselect
		output wire        onchip_memory_s1_clken,                          //                                  .clken
		output wire [3:0]  performance_counter_control_slave_address,       // performance_counter_control_slave.address
		output wire        performance_counter_control_slave_write,         //                                  .write
		input  wire [31:0] performance_counter_control_slave_readdata,      //                                  .readdata
		output wire [31:0] performance_counter_control_slave_writedata,     //                                  .writedata
		output wire        performance_counter_control_slave_begintransfer, //                                  .begintransfer
		output wire [1:0]  pio_led_s1_address,                              //                        pio_led_s1.address
		output wire        pio_led_s1_write,                                //                                  .write
		input  wire [31:0] pio_led_s1_readdata,                             //                                  .readdata
		output wire [31:0] pio_led_s1_writedata,                            //                                  .writedata
		output wire        pio_led_s1_chipselect,                           //                                  .chipselect
		output wire [1:0]  SCL_s1_address,                                  //                            SCL_s1.address
		output wire        SCL_s1_write,                                    //                                  .write
		input  wire [31:0] SCL_s1_readdata,                                 //                                  .readdata
		output wire [31:0] SCL_s1_writedata,                                //                                  .writedata
		output wire        SCL_s1_chipselect,                               //                                  .chipselect
		output wire [1:0]  SDA_s1_address,                                  //                            SDA_s1.address
		output wire        SDA_s1_write,                                    //                                  .write
		input  wire [31:0] SDA_s1_readdata,                                 //                                  .readdata
		output wire [31:0] SDA_s1_writedata,                                //                                  .writedata
		output wire        SDA_s1_chipselect,                               //                                  .chipselect
		output wire [23:0] sdram_s1_address,                                //                          sdram_s1.address
		output wire        sdram_s1_write,                                  //                                  .write
		output wire        sdram_s1_read,                                   //                                  .read
		input  wire [15:0] sdram_s1_readdata,                               //                                  .readdata
		output wire [15:0] sdram_s1_writedata,                              //                                  .writedata
		output wire [1:0]  sdram_s1_byteenable,                             //                                  .byteenable
		input  wire        sdram_s1_readdatavalid,                          //                                  .readdatavalid
		input  wire        sdram_s1_waitrequest,                            //                                  .waitrequest
		output wire        sdram_s1_chipselect,                             //                                  .chipselect
		output wire [1:0]  SM_1clr_s1_address,                              //                        SM_1clr_s1.address
		output wire        SM_1clr_s1_write,                                //                                  .write
		input  wire [31:0] SM_1clr_s1_readdata,                             //                                  .readdata
		output wire [31:0] SM_1clr_s1_writedata,                            //                                  .writedata
		output wire        SM_1clr_s1_chipselect,                           //                                  .chipselect
		output wire [1:0]  SM_1ena_s1_address,                              //                        SM_1ena_s1.address
		output wire        SM_1ena_s1_write,                                //                                  .write
		input  wire [31:0] SM_1ena_s1_readdata,                             //                                  .readdata
		output wire [31:0] SM_1ena_s1_writedata,                            //                                  .writedata
		output wire        SM_1ena_s1_chipselect,                           //                                  .chipselect
		output wire [1:0]  SM_2strobe_s1_address,                           //                     SM_2strobe_s1.address
		output wire        SM_2strobe_s1_write,                             //                                  .write
		input  wire [31:0] SM_2strobe_s1_readdata,                          //                                  .readdata
		output wire [31:0] SM_2strobe_s1_writedata,                         //                                  .writedata
		output wire        SM_2strobe_s1_chipselect,                        //                                  .chipselect
		output wire [1:0]  SM_data_in_s1_address,                           //                     SM_data_in_s1.address
		input  wire [31:0] SM_data_in_s1_readdata,                          //                                  .readdata
		output wire [1:0]  SM_mux_s1_address,                               //                         SM_mux_s1.address
		output wire        SM_mux_s1_write,                                 //                                  .write
		input  wire [31:0] SM_mux_s1_readdata,                              //                                  .readdata
		output wire [31:0] SM_mux_s1_writedata,                             //                                  .writedata
		output wire        SM_mux_s1_chipselect,                            //                                  .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                //          sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,               //                                  .readdata
		output wire [1:0]  VS_int_in_s1_address,                            //                      VS_int_in_s1.address
		output wire        VS_int_in_s1_write,                              //                                  .write
		input  wire [31:0] VS_int_in_s1_readdata,                           //                                  .readdata
		output wire [31:0] VS_int_in_s1_writedata,                          //                                  .writedata
		output wire        VS_int_in_s1_chipselect                          //                                  .chipselect
	);

	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // CPU_instruction_master_agent:av_waitrequest -> CPU_instruction_master_translator:uav_waitrequest
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // CPU_instruction_master_translator:uav_burstcount -> CPU_instruction_master_agent:av_burstcount
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // CPU_instruction_master_translator:uav_writedata -> CPU_instruction_master_agent:av_writedata
	wire   [26:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // CPU_instruction_master_translator:uav_address -> CPU_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;          // CPU_instruction_master_translator:uav_lock -> CPU_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;         // CPU_instruction_master_translator:uav_write -> CPU_instruction_master_agent:av_write
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;          // CPU_instruction_master_translator:uav_read -> CPU_instruction_master_agent:av_read
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // CPU_instruction_master_agent:av_readdata -> CPU_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // CPU_instruction_master_translator:uav_debugaccess -> CPU_instruction_master_agent:av_debugaccess
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // CPU_instruction_master_translator:uav_byteenable -> CPU_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // CPU_instruction_master_agent:av_readdatavalid -> CPU_instruction_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // CPU_data_master_agent:av_waitrequest -> CPU_data_master_translator:uav_waitrequest
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // CPU_data_master_translator:uav_burstcount -> CPU_data_master_agent:av_burstcount
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // CPU_data_master_translator:uav_writedata -> CPU_data_master_agent:av_writedata
	wire   [26:0] cpu_data_master_translator_avalon_universal_master_0_address;              // CPU_data_master_translator:uav_address -> CPU_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                 // CPU_data_master_translator:uav_lock -> CPU_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                // CPU_data_master_translator:uav_write -> CPU_data_master_agent:av_write
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                 // CPU_data_master_translator:uav_read -> CPU_data_master_agent:av_read
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // CPU_data_master_agent:av_readdata -> CPU_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // CPU_data_master_translator:uav_debugaccess -> CPU_data_master_agent:av_debugaccess
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // CPU_data_master_translator:uav_byteenable -> CPU_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // CPU_data_master_agent:av_readdatavalid -> CPU_data_master_translator:uav_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_waitrequest;                                // CPU_jtag_debug_module_translator:uav_waitrequest -> CPU_jtag_debug_module_agent:m0_waitrequest
	wire    [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // CPU_jtag_debug_module_agent:m0_burstcount -> CPU_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // CPU_jtag_debug_module_agent:m0_writedata -> CPU_jtag_debug_module_translator:uav_writedata
	wire   [26:0] cpu_jtag_debug_module_agent_m0_address;                                    // CPU_jtag_debug_module_agent:m0_address -> CPU_jtag_debug_module_translator:uav_address
	wire          cpu_jtag_debug_module_agent_m0_write;                                      // CPU_jtag_debug_module_agent:m0_write -> CPU_jtag_debug_module_translator:uav_write
	wire          cpu_jtag_debug_module_agent_m0_lock;                                       // CPU_jtag_debug_module_agent:m0_lock -> CPU_jtag_debug_module_translator:uav_lock
	wire          cpu_jtag_debug_module_agent_m0_read;                                       // CPU_jtag_debug_module_agent:m0_read -> CPU_jtag_debug_module_translator:uav_read
	wire   [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // CPU_jtag_debug_module_translator:uav_readdata -> CPU_jtag_debug_module_agent:m0_readdata
	wire          cpu_jtag_debug_module_agent_m0_readdatavalid;                              // CPU_jtag_debug_module_translator:uav_readdatavalid -> CPU_jtag_debug_module_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_agent_m0_debugaccess;                                // CPU_jtag_debug_module_agent:m0_debugaccess -> CPU_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // CPU_jtag_debug_module_agent:m0_byteenable -> CPU_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // CPU_jtag_debug_module_agent:rf_source_endofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_agent_rf_source_valid;                               // CPU_jtag_debug_module_agent:rf_source_valid -> CPU_jtag_debug_module_agent_rsp_fifo:in_valid
	wire          cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // CPU_jtag_debug_module_agent:rf_source_startofpacket -> CPU_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [107:0] cpu_jtag_debug_module_agent_rf_source_data;                                // CPU_jtag_debug_module_agent:rf_source_data -> CPU_jtag_debug_module_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_agent_rf_source_ready;                               // CPU_jtag_debug_module_agent_rsp_fifo:in_ready -> CPU_jtag_debug_module_agent:rf_source_ready
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // CPU_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> CPU_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // CPU_jtag_debug_module_agent_rsp_fifo:out_valid -> CPU_jtag_debug_module_agent:rf_sink_valid
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // CPU_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> CPU_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [107:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // CPU_jtag_debug_module_agent_rsp_fifo:out_data -> CPU_jtag_debug_module_agent:rf_sink_data
	wire          cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // CPU_jtag_debug_module_agent:rf_sink_ready -> CPU_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // CPU_jtag_debug_module_agent:rdata_fifo_src_valid -> CPU_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // CPU_jtag_debug_module_agent:rdata_fifo_src_data -> CPU_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // CPU_jtag_debug_module_agent:rdata_fifo_sink_ready -> CPU_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> CPU_jtag_debug_module_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> CPU_jtag_debug_module_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> CPU_jtag_debug_module_agent:cp_startofpacket
	wire  [106:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> CPU_jtag_debug_module_agent:cp_data
	wire   [20:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> CPU_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_src_ready;                                                         // CPU_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire          sdram_s1_agent_m0_waitrequest;                                             // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                              // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [15:0] sdram_s1_agent_m0_writedata;                                               // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [26:0] sdram_s1_agent_m0_address;                                                 // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_agent_m0_write;                                                   // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_agent_m0_lock;                                                    // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_agent_m0_read;                                                    // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_readdatavalid;                                           // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_debugaccess;                                             // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                              // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_rf_source_endofpacket;                                      // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rf_source_valid;                                            // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire          sdram_s1_agent_rf_source_startofpacket;                                    // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire   [89:0] sdram_s1_agent_rf_source_data;                                             // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                            // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                   // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                         // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                 // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire   [89:0] sdram_s1_agent_rsp_fifo_out_data;                                          // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                         // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                       // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                        // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                       // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                       // sdram_s1_agent_rdata_fifo:out_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                        // sdram_s1_agent_rdata_fifo:out_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                       // sdram_s1_agent:rdata_fifo_sink_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire   [26:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [107:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [107:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire  [106:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire   [20:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire          pio_led_s1_agent_m0_waitrequest;                                           // pio_led_s1_translator:uav_waitrequest -> pio_led_s1_agent:m0_waitrequest
	wire    [2:0] pio_led_s1_agent_m0_burstcount;                                            // pio_led_s1_agent:m0_burstcount -> pio_led_s1_translator:uav_burstcount
	wire   [31:0] pio_led_s1_agent_m0_writedata;                                             // pio_led_s1_agent:m0_writedata -> pio_led_s1_translator:uav_writedata
	wire   [26:0] pio_led_s1_agent_m0_address;                                               // pio_led_s1_agent:m0_address -> pio_led_s1_translator:uav_address
	wire          pio_led_s1_agent_m0_write;                                                 // pio_led_s1_agent:m0_write -> pio_led_s1_translator:uav_write
	wire          pio_led_s1_agent_m0_lock;                                                  // pio_led_s1_agent:m0_lock -> pio_led_s1_translator:uav_lock
	wire          pio_led_s1_agent_m0_read;                                                  // pio_led_s1_agent:m0_read -> pio_led_s1_translator:uav_read
	wire   [31:0] pio_led_s1_agent_m0_readdata;                                              // pio_led_s1_translator:uav_readdata -> pio_led_s1_agent:m0_readdata
	wire          pio_led_s1_agent_m0_readdatavalid;                                         // pio_led_s1_translator:uav_readdatavalid -> pio_led_s1_agent:m0_readdatavalid
	wire          pio_led_s1_agent_m0_debugaccess;                                           // pio_led_s1_agent:m0_debugaccess -> pio_led_s1_translator:uav_debugaccess
	wire    [3:0] pio_led_s1_agent_m0_byteenable;                                            // pio_led_s1_agent:m0_byteenable -> pio_led_s1_translator:uav_byteenable
	wire          pio_led_s1_agent_rf_source_endofpacket;                                    // pio_led_s1_agent:rf_source_endofpacket -> pio_led_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_led_s1_agent_rf_source_valid;                                          // pio_led_s1_agent:rf_source_valid -> pio_led_s1_agent_rsp_fifo:in_valid
	wire          pio_led_s1_agent_rf_source_startofpacket;                                  // pio_led_s1_agent:rf_source_startofpacket -> pio_led_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] pio_led_s1_agent_rf_source_data;                                           // pio_led_s1_agent:rf_source_data -> pio_led_s1_agent_rsp_fifo:in_data
	wire          pio_led_s1_agent_rf_source_ready;                                          // pio_led_s1_agent_rsp_fifo:in_ready -> pio_led_s1_agent:rf_source_ready
	wire          pio_led_s1_agent_rsp_fifo_out_endofpacket;                                 // pio_led_s1_agent_rsp_fifo:out_endofpacket -> pio_led_s1_agent:rf_sink_endofpacket
	wire          pio_led_s1_agent_rsp_fifo_out_valid;                                       // pio_led_s1_agent_rsp_fifo:out_valid -> pio_led_s1_agent:rf_sink_valid
	wire          pio_led_s1_agent_rsp_fifo_out_startofpacket;                               // pio_led_s1_agent_rsp_fifo:out_startofpacket -> pio_led_s1_agent:rf_sink_startofpacket
	wire  [107:0] pio_led_s1_agent_rsp_fifo_out_data;                                        // pio_led_s1_agent_rsp_fifo:out_data -> pio_led_s1_agent:rf_sink_data
	wire          pio_led_s1_agent_rsp_fifo_out_ready;                                       // pio_led_s1_agent:rf_sink_ready -> pio_led_s1_agent_rsp_fifo:out_ready
	wire          pio_led_s1_agent_rdata_fifo_src_valid;                                     // pio_led_s1_agent:rdata_fifo_src_valid -> pio_led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_led_s1_agent_rdata_fifo_src_data;                                      // pio_led_s1_agent:rdata_fifo_src_data -> pio_led_s1_agent:rdata_fifo_sink_data
	wire          pio_led_s1_agent_rdata_fifo_src_ready;                                     // pio_led_s1_agent:rdata_fifo_sink_ready -> pio_led_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> pio_led_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> pio_led_s1_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> pio_led_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> pio_led_s1_agent:cp_data
	wire   [20:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> pio_led_s1_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                     // pio_led_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                             // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                              // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                               // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire   [26:0] sysid_qsys_control_slave_agent_m0_address;                                 // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire          sysid_qsys_control_slave_agent_m0_write;                                   // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire          sysid_qsys_control_slave_agent_m0_lock;                                    // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire          sysid_qsys_control_slave_agent_m0_read;                                    // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                           // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                             // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                              // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                      // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                            // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                    // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sysid_qsys_control_slave_agent_rf_source_data;                             // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                            // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                   // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                         // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                 // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire  [107:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                         // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                       // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                        // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                       // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire  [106:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire   [20:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                     // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire          onchip_memory_s1_agent_m0_waitrequest;                                     // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire    [2:0] onchip_memory_s1_agent_m0_burstcount;                                      // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire   [31:0] onchip_memory_s1_agent_m0_writedata;                                       // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire   [26:0] onchip_memory_s1_agent_m0_address;                                         // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire          onchip_memory_s1_agent_m0_write;                                           // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire          onchip_memory_s1_agent_m0_lock;                                            // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire          onchip_memory_s1_agent_m0_read;                                            // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire   [31:0] onchip_memory_s1_agent_m0_readdata;                                        // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                   // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_debugaccess;                                     // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire    [3:0] onchip_memory_s1_agent_m0_byteenable;                                      // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                              // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rf_source_valid;                                    // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                            // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] onchip_memory_s1_agent_rf_source_data;                                     // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                    // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                           // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                 // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                         // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire  [107:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                  // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                 // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                               // onchip_memory_s1_agent:rdata_fifo_src_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                // onchip_memory_s1_agent:rdata_fifo_src_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                               // onchip_memory_s1_agent:rdata_fifo_sink_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> onchip_memory_s1_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> onchip_memory_s1_agent:cp_data
	wire   [20:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> onchip_memory_s1_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                     // onchip_memory_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire          lcd_data_out_s1_agent_m0_waitrequest;                                      // LCD_DATA_OUT_s1_translator:uav_waitrequest -> LCD_DATA_OUT_s1_agent:m0_waitrequest
	wire    [2:0] lcd_data_out_s1_agent_m0_burstcount;                                       // LCD_DATA_OUT_s1_agent:m0_burstcount -> LCD_DATA_OUT_s1_translator:uav_burstcount
	wire   [31:0] lcd_data_out_s1_agent_m0_writedata;                                        // LCD_DATA_OUT_s1_agent:m0_writedata -> LCD_DATA_OUT_s1_translator:uav_writedata
	wire   [26:0] lcd_data_out_s1_agent_m0_address;                                          // LCD_DATA_OUT_s1_agent:m0_address -> LCD_DATA_OUT_s1_translator:uav_address
	wire          lcd_data_out_s1_agent_m0_write;                                            // LCD_DATA_OUT_s1_agent:m0_write -> LCD_DATA_OUT_s1_translator:uav_write
	wire          lcd_data_out_s1_agent_m0_lock;                                             // LCD_DATA_OUT_s1_agent:m0_lock -> LCD_DATA_OUT_s1_translator:uav_lock
	wire          lcd_data_out_s1_agent_m0_read;                                             // LCD_DATA_OUT_s1_agent:m0_read -> LCD_DATA_OUT_s1_translator:uav_read
	wire   [31:0] lcd_data_out_s1_agent_m0_readdata;                                         // LCD_DATA_OUT_s1_translator:uav_readdata -> LCD_DATA_OUT_s1_agent:m0_readdata
	wire          lcd_data_out_s1_agent_m0_readdatavalid;                                    // LCD_DATA_OUT_s1_translator:uav_readdatavalid -> LCD_DATA_OUT_s1_agent:m0_readdatavalid
	wire          lcd_data_out_s1_agent_m0_debugaccess;                                      // LCD_DATA_OUT_s1_agent:m0_debugaccess -> LCD_DATA_OUT_s1_translator:uav_debugaccess
	wire    [3:0] lcd_data_out_s1_agent_m0_byteenable;                                       // LCD_DATA_OUT_s1_agent:m0_byteenable -> LCD_DATA_OUT_s1_translator:uav_byteenable
	wire          lcd_data_out_s1_agent_rf_source_endofpacket;                               // LCD_DATA_OUT_s1_agent:rf_source_endofpacket -> LCD_DATA_OUT_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_data_out_s1_agent_rf_source_valid;                                     // LCD_DATA_OUT_s1_agent:rf_source_valid -> LCD_DATA_OUT_s1_agent_rsp_fifo:in_valid
	wire          lcd_data_out_s1_agent_rf_source_startofpacket;                             // LCD_DATA_OUT_s1_agent:rf_source_startofpacket -> LCD_DATA_OUT_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_data_out_s1_agent_rf_source_data;                                      // LCD_DATA_OUT_s1_agent:rf_source_data -> LCD_DATA_OUT_s1_agent_rsp_fifo:in_data
	wire          lcd_data_out_s1_agent_rf_source_ready;                                     // LCD_DATA_OUT_s1_agent_rsp_fifo:in_ready -> LCD_DATA_OUT_s1_agent:rf_source_ready
	wire          lcd_data_out_s1_agent_rsp_fifo_out_endofpacket;                            // LCD_DATA_OUT_s1_agent_rsp_fifo:out_endofpacket -> LCD_DATA_OUT_s1_agent:rf_sink_endofpacket
	wire          lcd_data_out_s1_agent_rsp_fifo_out_valid;                                  // LCD_DATA_OUT_s1_agent_rsp_fifo:out_valid -> LCD_DATA_OUT_s1_agent:rf_sink_valid
	wire          lcd_data_out_s1_agent_rsp_fifo_out_startofpacket;                          // LCD_DATA_OUT_s1_agent_rsp_fifo:out_startofpacket -> LCD_DATA_OUT_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_data_out_s1_agent_rsp_fifo_out_data;                                   // LCD_DATA_OUT_s1_agent_rsp_fifo:out_data -> LCD_DATA_OUT_s1_agent:rf_sink_data
	wire          lcd_data_out_s1_agent_rsp_fifo_out_ready;                                  // LCD_DATA_OUT_s1_agent:rf_sink_ready -> LCD_DATA_OUT_s1_agent_rsp_fifo:out_ready
	wire          lcd_data_out_s1_agent_rdata_fifo_src_valid;                                // LCD_DATA_OUT_s1_agent:rdata_fifo_src_valid -> LCD_DATA_OUT_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_data_out_s1_agent_rdata_fifo_src_data;                                 // LCD_DATA_OUT_s1_agent:rdata_fifo_src_data -> LCD_DATA_OUT_s1_agent:rdata_fifo_sink_data
	wire          lcd_data_out_s1_agent_rdata_fifo_src_ready;                                // LCD_DATA_OUT_s1_agent:rdata_fifo_sink_ready -> LCD_DATA_OUT_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> LCD_DATA_OUT_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> LCD_DATA_OUT_s1_agent:cp_valid
	wire          cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> LCD_DATA_OUT_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> LCD_DATA_OUT_s1_agent:cp_data
	wire   [20:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> LCD_DATA_OUT_s1_agent:cp_channel
	wire          cmd_mux_006_src_ready;                                                     // LCD_DATA_OUT_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire          lcd_rs_s1_agent_m0_waitrequest;                                            // LCD_RS_s1_translator:uav_waitrequest -> LCD_RS_s1_agent:m0_waitrequest
	wire    [2:0] lcd_rs_s1_agent_m0_burstcount;                                             // LCD_RS_s1_agent:m0_burstcount -> LCD_RS_s1_translator:uav_burstcount
	wire   [31:0] lcd_rs_s1_agent_m0_writedata;                                              // LCD_RS_s1_agent:m0_writedata -> LCD_RS_s1_translator:uav_writedata
	wire   [26:0] lcd_rs_s1_agent_m0_address;                                                // LCD_RS_s1_agent:m0_address -> LCD_RS_s1_translator:uav_address
	wire          lcd_rs_s1_agent_m0_write;                                                  // LCD_RS_s1_agent:m0_write -> LCD_RS_s1_translator:uav_write
	wire          lcd_rs_s1_agent_m0_lock;                                                   // LCD_RS_s1_agent:m0_lock -> LCD_RS_s1_translator:uav_lock
	wire          lcd_rs_s1_agent_m0_read;                                                   // LCD_RS_s1_agent:m0_read -> LCD_RS_s1_translator:uav_read
	wire   [31:0] lcd_rs_s1_agent_m0_readdata;                                               // LCD_RS_s1_translator:uav_readdata -> LCD_RS_s1_agent:m0_readdata
	wire          lcd_rs_s1_agent_m0_readdatavalid;                                          // LCD_RS_s1_translator:uav_readdatavalid -> LCD_RS_s1_agent:m0_readdatavalid
	wire          lcd_rs_s1_agent_m0_debugaccess;                                            // LCD_RS_s1_agent:m0_debugaccess -> LCD_RS_s1_translator:uav_debugaccess
	wire    [3:0] lcd_rs_s1_agent_m0_byteenable;                                             // LCD_RS_s1_agent:m0_byteenable -> LCD_RS_s1_translator:uav_byteenable
	wire          lcd_rs_s1_agent_rf_source_endofpacket;                                     // LCD_RS_s1_agent:rf_source_endofpacket -> LCD_RS_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_rs_s1_agent_rf_source_valid;                                           // LCD_RS_s1_agent:rf_source_valid -> LCD_RS_s1_agent_rsp_fifo:in_valid
	wire          lcd_rs_s1_agent_rf_source_startofpacket;                                   // LCD_RS_s1_agent:rf_source_startofpacket -> LCD_RS_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_rs_s1_agent_rf_source_data;                                            // LCD_RS_s1_agent:rf_source_data -> LCD_RS_s1_agent_rsp_fifo:in_data
	wire          lcd_rs_s1_agent_rf_source_ready;                                           // LCD_RS_s1_agent_rsp_fifo:in_ready -> LCD_RS_s1_agent:rf_source_ready
	wire          lcd_rs_s1_agent_rsp_fifo_out_endofpacket;                                  // LCD_RS_s1_agent_rsp_fifo:out_endofpacket -> LCD_RS_s1_agent:rf_sink_endofpacket
	wire          lcd_rs_s1_agent_rsp_fifo_out_valid;                                        // LCD_RS_s1_agent_rsp_fifo:out_valid -> LCD_RS_s1_agent:rf_sink_valid
	wire          lcd_rs_s1_agent_rsp_fifo_out_startofpacket;                                // LCD_RS_s1_agent_rsp_fifo:out_startofpacket -> LCD_RS_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_rs_s1_agent_rsp_fifo_out_data;                                         // LCD_RS_s1_agent_rsp_fifo:out_data -> LCD_RS_s1_agent:rf_sink_data
	wire          lcd_rs_s1_agent_rsp_fifo_out_ready;                                        // LCD_RS_s1_agent:rf_sink_ready -> LCD_RS_s1_agent_rsp_fifo:out_ready
	wire          lcd_rs_s1_agent_rdata_fifo_src_valid;                                      // LCD_RS_s1_agent:rdata_fifo_src_valid -> LCD_RS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_rs_s1_agent_rdata_fifo_src_data;                                       // LCD_RS_s1_agent:rdata_fifo_src_data -> LCD_RS_s1_agent:rdata_fifo_sink_data
	wire          lcd_rs_s1_agent_rdata_fifo_src_ready;                                      // LCD_RS_s1_agent:rdata_fifo_sink_ready -> LCD_RS_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> LCD_RS_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> LCD_RS_s1_agent:cp_valid
	wire          cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> LCD_RS_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> LCD_RS_s1_agent:cp_data
	wire   [20:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> LCD_RS_s1_agent:cp_channel
	wire          cmd_mux_007_src_ready;                                                     // LCD_RS_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire          lcd_wr_s1_agent_m0_waitrequest;                                            // LCD_WR_s1_translator:uav_waitrequest -> LCD_WR_s1_agent:m0_waitrequest
	wire    [2:0] lcd_wr_s1_agent_m0_burstcount;                                             // LCD_WR_s1_agent:m0_burstcount -> LCD_WR_s1_translator:uav_burstcount
	wire   [31:0] lcd_wr_s1_agent_m0_writedata;                                              // LCD_WR_s1_agent:m0_writedata -> LCD_WR_s1_translator:uav_writedata
	wire   [26:0] lcd_wr_s1_agent_m0_address;                                                // LCD_WR_s1_agent:m0_address -> LCD_WR_s1_translator:uav_address
	wire          lcd_wr_s1_agent_m0_write;                                                  // LCD_WR_s1_agent:m0_write -> LCD_WR_s1_translator:uav_write
	wire          lcd_wr_s1_agent_m0_lock;                                                   // LCD_WR_s1_agent:m0_lock -> LCD_WR_s1_translator:uav_lock
	wire          lcd_wr_s1_agent_m0_read;                                                   // LCD_WR_s1_agent:m0_read -> LCD_WR_s1_translator:uav_read
	wire   [31:0] lcd_wr_s1_agent_m0_readdata;                                               // LCD_WR_s1_translator:uav_readdata -> LCD_WR_s1_agent:m0_readdata
	wire          lcd_wr_s1_agent_m0_readdatavalid;                                          // LCD_WR_s1_translator:uav_readdatavalid -> LCD_WR_s1_agent:m0_readdatavalid
	wire          lcd_wr_s1_agent_m0_debugaccess;                                            // LCD_WR_s1_agent:m0_debugaccess -> LCD_WR_s1_translator:uav_debugaccess
	wire    [3:0] lcd_wr_s1_agent_m0_byteenable;                                             // LCD_WR_s1_agent:m0_byteenable -> LCD_WR_s1_translator:uav_byteenable
	wire          lcd_wr_s1_agent_rf_source_endofpacket;                                     // LCD_WR_s1_agent:rf_source_endofpacket -> LCD_WR_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_wr_s1_agent_rf_source_valid;                                           // LCD_WR_s1_agent:rf_source_valid -> LCD_WR_s1_agent_rsp_fifo:in_valid
	wire          lcd_wr_s1_agent_rf_source_startofpacket;                                   // LCD_WR_s1_agent:rf_source_startofpacket -> LCD_WR_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_wr_s1_agent_rf_source_data;                                            // LCD_WR_s1_agent:rf_source_data -> LCD_WR_s1_agent_rsp_fifo:in_data
	wire          lcd_wr_s1_agent_rf_source_ready;                                           // LCD_WR_s1_agent_rsp_fifo:in_ready -> LCD_WR_s1_agent:rf_source_ready
	wire          lcd_wr_s1_agent_rsp_fifo_out_endofpacket;                                  // LCD_WR_s1_agent_rsp_fifo:out_endofpacket -> LCD_WR_s1_agent:rf_sink_endofpacket
	wire          lcd_wr_s1_agent_rsp_fifo_out_valid;                                        // LCD_WR_s1_agent_rsp_fifo:out_valid -> LCD_WR_s1_agent:rf_sink_valid
	wire          lcd_wr_s1_agent_rsp_fifo_out_startofpacket;                                // LCD_WR_s1_agent_rsp_fifo:out_startofpacket -> LCD_WR_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_wr_s1_agent_rsp_fifo_out_data;                                         // LCD_WR_s1_agent_rsp_fifo:out_data -> LCD_WR_s1_agent:rf_sink_data
	wire          lcd_wr_s1_agent_rsp_fifo_out_ready;                                        // LCD_WR_s1_agent:rf_sink_ready -> LCD_WR_s1_agent_rsp_fifo:out_ready
	wire          lcd_wr_s1_agent_rdata_fifo_src_valid;                                      // LCD_WR_s1_agent:rdata_fifo_src_valid -> LCD_WR_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_wr_s1_agent_rdata_fifo_src_data;                                       // LCD_WR_s1_agent:rdata_fifo_src_data -> LCD_WR_s1_agent:rdata_fifo_sink_data
	wire          lcd_wr_s1_agent_rdata_fifo_src_ready;                                      // LCD_WR_s1_agent:rdata_fifo_sink_ready -> LCD_WR_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> LCD_WR_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> LCD_WR_s1_agent:cp_valid
	wire          cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> LCD_WR_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> LCD_WR_s1_agent:cp_data
	wire   [20:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> LCD_WR_s1_agent:cp_channel
	wire          cmd_mux_008_src_ready;                                                     // LCD_WR_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire          lcd_cs_s1_agent_m0_waitrequest;                                            // LCD_CS_s1_translator:uav_waitrequest -> LCD_CS_s1_agent:m0_waitrequest
	wire    [2:0] lcd_cs_s1_agent_m0_burstcount;                                             // LCD_CS_s1_agent:m0_burstcount -> LCD_CS_s1_translator:uav_burstcount
	wire   [31:0] lcd_cs_s1_agent_m0_writedata;                                              // LCD_CS_s1_agent:m0_writedata -> LCD_CS_s1_translator:uav_writedata
	wire   [26:0] lcd_cs_s1_agent_m0_address;                                                // LCD_CS_s1_agent:m0_address -> LCD_CS_s1_translator:uav_address
	wire          lcd_cs_s1_agent_m0_write;                                                  // LCD_CS_s1_agent:m0_write -> LCD_CS_s1_translator:uav_write
	wire          lcd_cs_s1_agent_m0_lock;                                                   // LCD_CS_s1_agent:m0_lock -> LCD_CS_s1_translator:uav_lock
	wire          lcd_cs_s1_agent_m0_read;                                                   // LCD_CS_s1_agent:m0_read -> LCD_CS_s1_translator:uav_read
	wire   [31:0] lcd_cs_s1_agent_m0_readdata;                                               // LCD_CS_s1_translator:uav_readdata -> LCD_CS_s1_agent:m0_readdata
	wire          lcd_cs_s1_agent_m0_readdatavalid;                                          // LCD_CS_s1_translator:uav_readdatavalid -> LCD_CS_s1_agent:m0_readdatavalid
	wire          lcd_cs_s1_agent_m0_debugaccess;                                            // LCD_CS_s1_agent:m0_debugaccess -> LCD_CS_s1_translator:uav_debugaccess
	wire    [3:0] lcd_cs_s1_agent_m0_byteenable;                                             // LCD_CS_s1_agent:m0_byteenable -> LCD_CS_s1_translator:uav_byteenable
	wire          lcd_cs_s1_agent_rf_source_endofpacket;                                     // LCD_CS_s1_agent:rf_source_endofpacket -> LCD_CS_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_cs_s1_agent_rf_source_valid;                                           // LCD_CS_s1_agent:rf_source_valid -> LCD_CS_s1_agent_rsp_fifo:in_valid
	wire          lcd_cs_s1_agent_rf_source_startofpacket;                                   // LCD_CS_s1_agent:rf_source_startofpacket -> LCD_CS_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_cs_s1_agent_rf_source_data;                                            // LCD_CS_s1_agent:rf_source_data -> LCD_CS_s1_agent_rsp_fifo:in_data
	wire          lcd_cs_s1_agent_rf_source_ready;                                           // LCD_CS_s1_agent_rsp_fifo:in_ready -> LCD_CS_s1_agent:rf_source_ready
	wire          lcd_cs_s1_agent_rsp_fifo_out_endofpacket;                                  // LCD_CS_s1_agent_rsp_fifo:out_endofpacket -> LCD_CS_s1_agent:rf_sink_endofpacket
	wire          lcd_cs_s1_agent_rsp_fifo_out_valid;                                        // LCD_CS_s1_agent_rsp_fifo:out_valid -> LCD_CS_s1_agent:rf_sink_valid
	wire          lcd_cs_s1_agent_rsp_fifo_out_startofpacket;                                // LCD_CS_s1_agent_rsp_fifo:out_startofpacket -> LCD_CS_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_cs_s1_agent_rsp_fifo_out_data;                                         // LCD_CS_s1_agent_rsp_fifo:out_data -> LCD_CS_s1_agent:rf_sink_data
	wire          lcd_cs_s1_agent_rsp_fifo_out_ready;                                        // LCD_CS_s1_agent:rf_sink_ready -> LCD_CS_s1_agent_rsp_fifo:out_ready
	wire          lcd_cs_s1_agent_rdata_fifo_src_valid;                                      // LCD_CS_s1_agent:rdata_fifo_src_valid -> LCD_CS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_cs_s1_agent_rdata_fifo_src_data;                                       // LCD_CS_s1_agent:rdata_fifo_src_data -> LCD_CS_s1_agent:rdata_fifo_sink_data
	wire          lcd_cs_s1_agent_rdata_fifo_src_ready;                                      // LCD_CS_s1_agent:rdata_fifo_sink_ready -> LCD_CS_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> LCD_CS_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> LCD_CS_s1_agent:cp_valid
	wire          cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> LCD_CS_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> LCD_CS_s1_agent:cp_data
	wire   [20:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> LCD_CS_s1_agent:cp_channel
	wire          cmd_mux_009_src_ready;                                                     // LCD_CS_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire          lcd_reset_s1_agent_m0_waitrequest;                                         // LCD_RESET_s1_translator:uav_waitrequest -> LCD_RESET_s1_agent:m0_waitrequest
	wire    [2:0] lcd_reset_s1_agent_m0_burstcount;                                          // LCD_RESET_s1_agent:m0_burstcount -> LCD_RESET_s1_translator:uav_burstcount
	wire   [31:0] lcd_reset_s1_agent_m0_writedata;                                           // LCD_RESET_s1_agent:m0_writedata -> LCD_RESET_s1_translator:uav_writedata
	wire   [26:0] lcd_reset_s1_agent_m0_address;                                             // LCD_RESET_s1_agent:m0_address -> LCD_RESET_s1_translator:uav_address
	wire          lcd_reset_s1_agent_m0_write;                                               // LCD_RESET_s1_agent:m0_write -> LCD_RESET_s1_translator:uav_write
	wire          lcd_reset_s1_agent_m0_lock;                                                // LCD_RESET_s1_agent:m0_lock -> LCD_RESET_s1_translator:uav_lock
	wire          lcd_reset_s1_agent_m0_read;                                                // LCD_RESET_s1_agent:m0_read -> LCD_RESET_s1_translator:uav_read
	wire   [31:0] lcd_reset_s1_agent_m0_readdata;                                            // LCD_RESET_s1_translator:uav_readdata -> LCD_RESET_s1_agent:m0_readdata
	wire          lcd_reset_s1_agent_m0_readdatavalid;                                       // LCD_RESET_s1_translator:uav_readdatavalid -> LCD_RESET_s1_agent:m0_readdatavalid
	wire          lcd_reset_s1_agent_m0_debugaccess;                                         // LCD_RESET_s1_agent:m0_debugaccess -> LCD_RESET_s1_translator:uav_debugaccess
	wire    [3:0] lcd_reset_s1_agent_m0_byteenable;                                          // LCD_RESET_s1_agent:m0_byteenable -> LCD_RESET_s1_translator:uav_byteenable
	wire          lcd_reset_s1_agent_rf_source_endofpacket;                                  // LCD_RESET_s1_agent:rf_source_endofpacket -> LCD_RESET_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_reset_s1_agent_rf_source_valid;                                        // LCD_RESET_s1_agent:rf_source_valid -> LCD_RESET_s1_agent_rsp_fifo:in_valid
	wire          lcd_reset_s1_agent_rf_source_startofpacket;                                // LCD_RESET_s1_agent:rf_source_startofpacket -> LCD_RESET_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_reset_s1_agent_rf_source_data;                                         // LCD_RESET_s1_agent:rf_source_data -> LCD_RESET_s1_agent_rsp_fifo:in_data
	wire          lcd_reset_s1_agent_rf_source_ready;                                        // LCD_RESET_s1_agent_rsp_fifo:in_ready -> LCD_RESET_s1_agent:rf_source_ready
	wire          lcd_reset_s1_agent_rsp_fifo_out_endofpacket;                               // LCD_RESET_s1_agent_rsp_fifo:out_endofpacket -> LCD_RESET_s1_agent:rf_sink_endofpacket
	wire          lcd_reset_s1_agent_rsp_fifo_out_valid;                                     // LCD_RESET_s1_agent_rsp_fifo:out_valid -> LCD_RESET_s1_agent:rf_sink_valid
	wire          lcd_reset_s1_agent_rsp_fifo_out_startofpacket;                             // LCD_RESET_s1_agent_rsp_fifo:out_startofpacket -> LCD_RESET_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_reset_s1_agent_rsp_fifo_out_data;                                      // LCD_RESET_s1_agent_rsp_fifo:out_data -> LCD_RESET_s1_agent:rf_sink_data
	wire          lcd_reset_s1_agent_rsp_fifo_out_ready;                                     // LCD_RESET_s1_agent:rf_sink_ready -> LCD_RESET_s1_agent_rsp_fifo:out_ready
	wire          lcd_reset_s1_agent_rdata_fifo_src_valid;                                   // LCD_RESET_s1_agent:rdata_fifo_src_valid -> LCD_RESET_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_reset_s1_agent_rdata_fifo_src_data;                                    // LCD_RESET_s1_agent:rdata_fifo_src_data -> LCD_RESET_s1_agent:rdata_fifo_sink_data
	wire          lcd_reset_s1_agent_rdata_fifo_src_ready;                                   // LCD_RESET_s1_agent:rdata_fifo_sink_ready -> LCD_RESET_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> LCD_RESET_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> LCD_RESET_s1_agent:cp_valid
	wire          cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> LCD_RESET_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> LCD_RESET_s1_agent:cp_data
	wire   [20:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> LCD_RESET_s1_agent:cp_channel
	wire          cmd_mux_010_src_ready;                                                     // LCD_RESET_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire          sda_s1_agent_m0_waitrequest;                                               // SDA_s1_translator:uav_waitrequest -> SDA_s1_agent:m0_waitrequest
	wire    [2:0] sda_s1_agent_m0_burstcount;                                                // SDA_s1_agent:m0_burstcount -> SDA_s1_translator:uav_burstcount
	wire   [31:0] sda_s1_agent_m0_writedata;                                                 // SDA_s1_agent:m0_writedata -> SDA_s1_translator:uav_writedata
	wire   [26:0] sda_s1_agent_m0_address;                                                   // SDA_s1_agent:m0_address -> SDA_s1_translator:uav_address
	wire          sda_s1_agent_m0_write;                                                     // SDA_s1_agent:m0_write -> SDA_s1_translator:uav_write
	wire          sda_s1_agent_m0_lock;                                                      // SDA_s1_agent:m0_lock -> SDA_s1_translator:uav_lock
	wire          sda_s1_agent_m0_read;                                                      // SDA_s1_agent:m0_read -> SDA_s1_translator:uav_read
	wire   [31:0] sda_s1_agent_m0_readdata;                                                  // SDA_s1_translator:uav_readdata -> SDA_s1_agent:m0_readdata
	wire          sda_s1_agent_m0_readdatavalid;                                             // SDA_s1_translator:uav_readdatavalid -> SDA_s1_agent:m0_readdatavalid
	wire          sda_s1_agent_m0_debugaccess;                                               // SDA_s1_agent:m0_debugaccess -> SDA_s1_translator:uav_debugaccess
	wire    [3:0] sda_s1_agent_m0_byteenable;                                                // SDA_s1_agent:m0_byteenable -> SDA_s1_translator:uav_byteenable
	wire          sda_s1_agent_rf_source_endofpacket;                                        // SDA_s1_agent:rf_source_endofpacket -> SDA_s1_agent_rsp_fifo:in_endofpacket
	wire          sda_s1_agent_rf_source_valid;                                              // SDA_s1_agent:rf_source_valid -> SDA_s1_agent_rsp_fifo:in_valid
	wire          sda_s1_agent_rf_source_startofpacket;                                      // SDA_s1_agent:rf_source_startofpacket -> SDA_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sda_s1_agent_rf_source_data;                                               // SDA_s1_agent:rf_source_data -> SDA_s1_agent_rsp_fifo:in_data
	wire          sda_s1_agent_rf_source_ready;                                              // SDA_s1_agent_rsp_fifo:in_ready -> SDA_s1_agent:rf_source_ready
	wire          sda_s1_agent_rsp_fifo_out_endofpacket;                                     // SDA_s1_agent_rsp_fifo:out_endofpacket -> SDA_s1_agent:rf_sink_endofpacket
	wire          sda_s1_agent_rsp_fifo_out_valid;                                           // SDA_s1_agent_rsp_fifo:out_valid -> SDA_s1_agent:rf_sink_valid
	wire          sda_s1_agent_rsp_fifo_out_startofpacket;                                   // SDA_s1_agent_rsp_fifo:out_startofpacket -> SDA_s1_agent:rf_sink_startofpacket
	wire  [107:0] sda_s1_agent_rsp_fifo_out_data;                                            // SDA_s1_agent_rsp_fifo:out_data -> SDA_s1_agent:rf_sink_data
	wire          sda_s1_agent_rsp_fifo_out_ready;                                           // SDA_s1_agent:rf_sink_ready -> SDA_s1_agent_rsp_fifo:out_ready
	wire          sda_s1_agent_rdata_fifo_src_valid;                                         // SDA_s1_agent:rdata_fifo_src_valid -> SDA_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sda_s1_agent_rdata_fifo_src_data;                                          // SDA_s1_agent:rdata_fifo_src_data -> SDA_s1_agent:rdata_fifo_sink_data
	wire          sda_s1_agent_rdata_fifo_src_ready;                                         // SDA_s1_agent:rdata_fifo_sink_ready -> SDA_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> SDA_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> SDA_s1_agent:cp_valid
	wire          cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> SDA_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> SDA_s1_agent:cp_data
	wire   [20:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> SDA_s1_agent:cp_channel
	wire          cmd_mux_011_src_ready;                                                     // SDA_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire          sm_1clr_s1_agent_m0_waitrequest;                                           // SM_1clr_s1_translator:uav_waitrequest -> SM_1clr_s1_agent:m0_waitrequest
	wire    [2:0] sm_1clr_s1_agent_m0_burstcount;                                            // SM_1clr_s1_agent:m0_burstcount -> SM_1clr_s1_translator:uav_burstcount
	wire   [31:0] sm_1clr_s1_agent_m0_writedata;                                             // SM_1clr_s1_agent:m0_writedata -> SM_1clr_s1_translator:uav_writedata
	wire   [26:0] sm_1clr_s1_agent_m0_address;                                               // SM_1clr_s1_agent:m0_address -> SM_1clr_s1_translator:uav_address
	wire          sm_1clr_s1_agent_m0_write;                                                 // SM_1clr_s1_agent:m0_write -> SM_1clr_s1_translator:uav_write
	wire          sm_1clr_s1_agent_m0_lock;                                                  // SM_1clr_s1_agent:m0_lock -> SM_1clr_s1_translator:uav_lock
	wire          sm_1clr_s1_agent_m0_read;                                                  // SM_1clr_s1_agent:m0_read -> SM_1clr_s1_translator:uav_read
	wire   [31:0] sm_1clr_s1_agent_m0_readdata;                                              // SM_1clr_s1_translator:uav_readdata -> SM_1clr_s1_agent:m0_readdata
	wire          sm_1clr_s1_agent_m0_readdatavalid;                                         // SM_1clr_s1_translator:uav_readdatavalid -> SM_1clr_s1_agent:m0_readdatavalid
	wire          sm_1clr_s1_agent_m0_debugaccess;                                           // SM_1clr_s1_agent:m0_debugaccess -> SM_1clr_s1_translator:uav_debugaccess
	wire    [3:0] sm_1clr_s1_agent_m0_byteenable;                                            // SM_1clr_s1_agent:m0_byteenable -> SM_1clr_s1_translator:uav_byteenable
	wire          sm_1clr_s1_agent_rf_source_endofpacket;                                    // SM_1clr_s1_agent:rf_source_endofpacket -> SM_1clr_s1_agent_rsp_fifo:in_endofpacket
	wire          sm_1clr_s1_agent_rf_source_valid;                                          // SM_1clr_s1_agent:rf_source_valid -> SM_1clr_s1_agent_rsp_fifo:in_valid
	wire          sm_1clr_s1_agent_rf_source_startofpacket;                                  // SM_1clr_s1_agent:rf_source_startofpacket -> SM_1clr_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sm_1clr_s1_agent_rf_source_data;                                           // SM_1clr_s1_agent:rf_source_data -> SM_1clr_s1_agent_rsp_fifo:in_data
	wire          sm_1clr_s1_agent_rf_source_ready;                                          // SM_1clr_s1_agent_rsp_fifo:in_ready -> SM_1clr_s1_agent:rf_source_ready
	wire          sm_1clr_s1_agent_rsp_fifo_out_endofpacket;                                 // SM_1clr_s1_agent_rsp_fifo:out_endofpacket -> SM_1clr_s1_agent:rf_sink_endofpacket
	wire          sm_1clr_s1_agent_rsp_fifo_out_valid;                                       // SM_1clr_s1_agent_rsp_fifo:out_valid -> SM_1clr_s1_agent:rf_sink_valid
	wire          sm_1clr_s1_agent_rsp_fifo_out_startofpacket;                               // SM_1clr_s1_agent_rsp_fifo:out_startofpacket -> SM_1clr_s1_agent:rf_sink_startofpacket
	wire  [107:0] sm_1clr_s1_agent_rsp_fifo_out_data;                                        // SM_1clr_s1_agent_rsp_fifo:out_data -> SM_1clr_s1_agent:rf_sink_data
	wire          sm_1clr_s1_agent_rsp_fifo_out_ready;                                       // SM_1clr_s1_agent:rf_sink_ready -> SM_1clr_s1_agent_rsp_fifo:out_ready
	wire          sm_1clr_s1_agent_rdata_fifo_src_valid;                                     // SM_1clr_s1_agent:rdata_fifo_src_valid -> SM_1clr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sm_1clr_s1_agent_rdata_fifo_src_data;                                      // SM_1clr_s1_agent:rdata_fifo_src_data -> SM_1clr_s1_agent:rdata_fifo_sink_data
	wire          sm_1clr_s1_agent_rdata_fifo_src_ready;                                     // SM_1clr_s1_agent:rdata_fifo_sink_ready -> SM_1clr_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> SM_1clr_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> SM_1clr_s1_agent:cp_valid
	wire          cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> SM_1clr_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> SM_1clr_s1_agent:cp_data
	wire   [20:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> SM_1clr_s1_agent:cp_channel
	wire          cmd_mux_012_src_ready;                                                     // SM_1clr_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire          sm_1ena_s1_agent_m0_waitrequest;                                           // SM_1ena_s1_translator:uav_waitrequest -> SM_1ena_s1_agent:m0_waitrequest
	wire    [2:0] sm_1ena_s1_agent_m0_burstcount;                                            // SM_1ena_s1_agent:m0_burstcount -> SM_1ena_s1_translator:uav_burstcount
	wire   [31:0] sm_1ena_s1_agent_m0_writedata;                                             // SM_1ena_s1_agent:m0_writedata -> SM_1ena_s1_translator:uav_writedata
	wire   [26:0] sm_1ena_s1_agent_m0_address;                                               // SM_1ena_s1_agent:m0_address -> SM_1ena_s1_translator:uav_address
	wire          sm_1ena_s1_agent_m0_write;                                                 // SM_1ena_s1_agent:m0_write -> SM_1ena_s1_translator:uav_write
	wire          sm_1ena_s1_agent_m0_lock;                                                  // SM_1ena_s1_agent:m0_lock -> SM_1ena_s1_translator:uav_lock
	wire          sm_1ena_s1_agent_m0_read;                                                  // SM_1ena_s1_agent:m0_read -> SM_1ena_s1_translator:uav_read
	wire   [31:0] sm_1ena_s1_agent_m0_readdata;                                              // SM_1ena_s1_translator:uav_readdata -> SM_1ena_s1_agent:m0_readdata
	wire          sm_1ena_s1_agent_m0_readdatavalid;                                         // SM_1ena_s1_translator:uav_readdatavalid -> SM_1ena_s1_agent:m0_readdatavalid
	wire          sm_1ena_s1_agent_m0_debugaccess;                                           // SM_1ena_s1_agent:m0_debugaccess -> SM_1ena_s1_translator:uav_debugaccess
	wire    [3:0] sm_1ena_s1_agent_m0_byteenable;                                            // SM_1ena_s1_agent:m0_byteenable -> SM_1ena_s1_translator:uav_byteenable
	wire          sm_1ena_s1_agent_rf_source_endofpacket;                                    // SM_1ena_s1_agent:rf_source_endofpacket -> SM_1ena_s1_agent_rsp_fifo:in_endofpacket
	wire          sm_1ena_s1_agent_rf_source_valid;                                          // SM_1ena_s1_agent:rf_source_valid -> SM_1ena_s1_agent_rsp_fifo:in_valid
	wire          sm_1ena_s1_agent_rf_source_startofpacket;                                  // SM_1ena_s1_agent:rf_source_startofpacket -> SM_1ena_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sm_1ena_s1_agent_rf_source_data;                                           // SM_1ena_s1_agent:rf_source_data -> SM_1ena_s1_agent_rsp_fifo:in_data
	wire          sm_1ena_s1_agent_rf_source_ready;                                          // SM_1ena_s1_agent_rsp_fifo:in_ready -> SM_1ena_s1_agent:rf_source_ready
	wire          sm_1ena_s1_agent_rsp_fifo_out_endofpacket;                                 // SM_1ena_s1_agent_rsp_fifo:out_endofpacket -> SM_1ena_s1_agent:rf_sink_endofpacket
	wire          sm_1ena_s1_agent_rsp_fifo_out_valid;                                       // SM_1ena_s1_agent_rsp_fifo:out_valid -> SM_1ena_s1_agent:rf_sink_valid
	wire          sm_1ena_s1_agent_rsp_fifo_out_startofpacket;                               // SM_1ena_s1_agent_rsp_fifo:out_startofpacket -> SM_1ena_s1_agent:rf_sink_startofpacket
	wire  [107:0] sm_1ena_s1_agent_rsp_fifo_out_data;                                        // SM_1ena_s1_agent_rsp_fifo:out_data -> SM_1ena_s1_agent:rf_sink_data
	wire          sm_1ena_s1_agent_rsp_fifo_out_ready;                                       // SM_1ena_s1_agent:rf_sink_ready -> SM_1ena_s1_agent_rsp_fifo:out_ready
	wire          sm_1ena_s1_agent_rdata_fifo_src_valid;                                     // SM_1ena_s1_agent:rdata_fifo_src_valid -> SM_1ena_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sm_1ena_s1_agent_rdata_fifo_src_data;                                      // SM_1ena_s1_agent:rdata_fifo_src_data -> SM_1ena_s1_agent:rdata_fifo_sink_data
	wire          sm_1ena_s1_agent_rdata_fifo_src_ready;                                     // SM_1ena_s1_agent:rdata_fifo_sink_ready -> SM_1ena_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> SM_1ena_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> SM_1ena_s1_agent:cp_valid
	wire          cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> SM_1ena_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> SM_1ena_s1_agent:cp_data
	wire   [20:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> SM_1ena_s1_agent:cp_channel
	wire          cmd_mux_013_src_ready;                                                     // SM_1ena_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire          sm_mux_s1_agent_m0_waitrequest;                                            // SM_mux_s1_translator:uav_waitrequest -> SM_mux_s1_agent:m0_waitrequest
	wire    [2:0] sm_mux_s1_agent_m0_burstcount;                                             // SM_mux_s1_agent:m0_burstcount -> SM_mux_s1_translator:uav_burstcount
	wire   [31:0] sm_mux_s1_agent_m0_writedata;                                              // SM_mux_s1_agent:m0_writedata -> SM_mux_s1_translator:uav_writedata
	wire   [26:0] sm_mux_s1_agent_m0_address;                                                // SM_mux_s1_agent:m0_address -> SM_mux_s1_translator:uav_address
	wire          sm_mux_s1_agent_m0_write;                                                  // SM_mux_s1_agent:m0_write -> SM_mux_s1_translator:uav_write
	wire          sm_mux_s1_agent_m0_lock;                                                   // SM_mux_s1_agent:m0_lock -> SM_mux_s1_translator:uav_lock
	wire          sm_mux_s1_agent_m0_read;                                                   // SM_mux_s1_agent:m0_read -> SM_mux_s1_translator:uav_read
	wire   [31:0] sm_mux_s1_agent_m0_readdata;                                               // SM_mux_s1_translator:uav_readdata -> SM_mux_s1_agent:m0_readdata
	wire          sm_mux_s1_agent_m0_readdatavalid;                                          // SM_mux_s1_translator:uav_readdatavalid -> SM_mux_s1_agent:m0_readdatavalid
	wire          sm_mux_s1_agent_m0_debugaccess;                                            // SM_mux_s1_agent:m0_debugaccess -> SM_mux_s1_translator:uav_debugaccess
	wire    [3:0] sm_mux_s1_agent_m0_byteenable;                                             // SM_mux_s1_agent:m0_byteenable -> SM_mux_s1_translator:uav_byteenable
	wire          sm_mux_s1_agent_rf_source_endofpacket;                                     // SM_mux_s1_agent:rf_source_endofpacket -> SM_mux_s1_agent_rsp_fifo:in_endofpacket
	wire          sm_mux_s1_agent_rf_source_valid;                                           // SM_mux_s1_agent:rf_source_valid -> SM_mux_s1_agent_rsp_fifo:in_valid
	wire          sm_mux_s1_agent_rf_source_startofpacket;                                   // SM_mux_s1_agent:rf_source_startofpacket -> SM_mux_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sm_mux_s1_agent_rf_source_data;                                            // SM_mux_s1_agent:rf_source_data -> SM_mux_s1_agent_rsp_fifo:in_data
	wire          sm_mux_s1_agent_rf_source_ready;                                           // SM_mux_s1_agent_rsp_fifo:in_ready -> SM_mux_s1_agent:rf_source_ready
	wire          sm_mux_s1_agent_rsp_fifo_out_endofpacket;                                  // SM_mux_s1_agent_rsp_fifo:out_endofpacket -> SM_mux_s1_agent:rf_sink_endofpacket
	wire          sm_mux_s1_agent_rsp_fifo_out_valid;                                        // SM_mux_s1_agent_rsp_fifo:out_valid -> SM_mux_s1_agent:rf_sink_valid
	wire          sm_mux_s1_agent_rsp_fifo_out_startofpacket;                                // SM_mux_s1_agent_rsp_fifo:out_startofpacket -> SM_mux_s1_agent:rf_sink_startofpacket
	wire  [107:0] sm_mux_s1_agent_rsp_fifo_out_data;                                         // SM_mux_s1_agent_rsp_fifo:out_data -> SM_mux_s1_agent:rf_sink_data
	wire          sm_mux_s1_agent_rsp_fifo_out_ready;                                        // SM_mux_s1_agent:rf_sink_ready -> SM_mux_s1_agent_rsp_fifo:out_ready
	wire          sm_mux_s1_agent_rdata_fifo_src_valid;                                      // SM_mux_s1_agent:rdata_fifo_src_valid -> SM_mux_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sm_mux_s1_agent_rdata_fifo_src_data;                                       // SM_mux_s1_agent:rdata_fifo_src_data -> SM_mux_s1_agent:rdata_fifo_sink_data
	wire          sm_mux_s1_agent_rdata_fifo_src_ready;                                      // SM_mux_s1_agent:rdata_fifo_sink_ready -> SM_mux_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> SM_mux_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> SM_mux_s1_agent:cp_valid
	wire          cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> SM_mux_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> SM_mux_s1_agent:cp_data
	wire   [20:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> SM_mux_s1_agent:cp_channel
	wire          cmd_mux_014_src_ready;                                                     // SM_mux_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire          sm_data_in_s1_agent_m0_waitrequest;                                        // SM_data_in_s1_translator:uav_waitrequest -> SM_data_in_s1_agent:m0_waitrequest
	wire    [2:0] sm_data_in_s1_agent_m0_burstcount;                                         // SM_data_in_s1_agent:m0_burstcount -> SM_data_in_s1_translator:uav_burstcount
	wire   [31:0] sm_data_in_s1_agent_m0_writedata;                                          // SM_data_in_s1_agent:m0_writedata -> SM_data_in_s1_translator:uav_writedata
	wire   [26:0] sm_data_in_s1_agent_m0_address;                                            // SM_data_in_s1_agent:m0_address -> SM_data_in_s1_translator:uav_address
	wire          sm_data_in_s1_agent_m0_write;                                              // SM_data_in_s1_agent:m0_write -> SM_data_in_s1_translator:uav_write
	wire          sm_data_in_s1_agent_m0_lock;                                               // SM_data_in_s1_agent:m0_lock -> SM_data_in_s1_translator:uav_lock
	wire          sm_data_in_s1_agent_m0_read;                                               // SM_data_in_s1_agent:m0_read -> SM_data_in_s1_translator:uav_read
	wire   [31:0] sm_data_in_s1_agent_m0_readdata;                                           // SM_data_in_s1_translator:uav_readdata -> SM_data_in_s1_agent:m0_readdata
	wire          sm_data_in_s1_agent_m0_readdatavalid;                                      // SM_data_in_s1_translator:uav_readdatavalid -> SM_data_in_s1_agent:m0_readdatavalid
	wire          sm_data_in_s1_agent_m0_debugaccess;                                        // SM_data_in_s1_agent:m0_debugaccess -> SM_data_in_s1_translator:uav_debugaccess
	wire    [3:0] sm_data_in_s1_agent_m0_byteenable;                                         // SM_data_in_s1_agent:m0_byteenable -> SM_data_in_s1_translator:uav_byteenable
	wire          sm_data_in_s1_agent_rf_source_endofpacket;                                 // SM_data_in_s1_agent:rf_source_endofpacket -> SM_data_in_s1_agent_rsp_fifo:in_endofpacket
	wire          sm_data_in_s1_agent_rf_source_valid;                                       // SM_data_in_s1_agent:rf_source_valid -> SM_data_in_s1_agent_rsp_fifo:in_valid
	wire          sm_data_in_s1_agent_rf_source_startofpacket;                               // SM_data_in_s1_agent:rf_source_startofpacket -> SM_data_in_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sm_data_in_s1_agent_rf_source_data;                                        // SM_data_in_s1_agent:rf_source_data -> SM_data_in_s1_agent_rsp_fifo:in_data
	wire          sm_data_in_s1_agent_rf_source_ready;                                       // SM_data_in_s1_agent_rsp_fifo:in_ready -> SM_data_in_s1_agent:rf_source_ready
	wire          sm_data_in_s1_agent_rsp_fifo_out_endofpacket;                              // SM_data_in_s1_agent_rsp_fifo:out_endofpacket -> SM_data_in_s1_agent:rf_sink_endofpacket
	wire          sm_data_in_s1_agent_rsp_fifo_out_valid;                                    // SM_data_in_s1_agent_rsp_fifo:out_valid -> SM_data_in_s1_agent:rf_sink_valid
	wire          sm_data_in_s1_agent_rsp_fifo_out_startofpacket;                            // SM_data_in_s1_agent_rsp_fifo:out_startofpacket -> SM_data_in_s1_agent:rf_sink_startofpacket
	wire  [107:0] sm_data_in_s1_agent_rsp_fifo_out_data;                                     // SM_data_in_s1_agent_rsp_fifo:out_data -> SM_data_in_s1_agent:rf_sink_data
	wire          sm_data_in_s1_agent_rsp_fifo_out_ready;                                    // SM_data_in_s1_agent:rf_sink_ready -> SM_data_in_s1_agent_rsp_fifo:out_ready
	wire          sm_data_in_s1_agent_rdata_fifo_src_valid;                                  // SM_data_in_s1_agent:rdata_fifo_src_valid -> SM_data_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sm_data_in_s1_agent_rdata_fifo_src_data;                                   // SM_data_in_s1_agent:rdata_fifo_src_data -> SM_data_in_s1_agent:rdata_fifo_sink_data
	wire          sm_data_in_s1_agent_rdata_fifo_src_ready;                                  // SM_data_in_s1_agent:rdata_fifo_sink_ready -> SM_data_in_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> SM_data_in_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> SM_data_in_s1_agent:cp_valid
	wire          cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> SM_data_in_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> SM_data_in_s1_agent:cp_data
	wire   [20:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> SM_data_in_s1_agent:cp_channel
	wire          cmd_mux_015_src_ready;                                                     // SM_data_in_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire          lcd_rd_s1_agent_m0_waitrequest;                                            // LCD_RD_s1_translator:uav_waitrequest -> LCD_RD_s1_agent:m0_waitrequest
	wire    [2:0] lcd_rd_s1_agent_m0_burstcount;                                             // LCD_RD_s1_agent:m0_burstcount -> LCD_RD_s1_translator:uav_burstcount
	wire   [31:0] lcd_rd_s1_agent_m0_writedata;                                              // LCD_RD_s1_agent:m0_writedata -> LCD_RD_s1_translator:uav_writedata
	wire   [26:0] lcd_rd_s1_agent_m0_address;                                                // LCD_RD_s1_agent:m0_address -> LCD_RD_s1_translator:uav_address
	wire          lcd_rd_s1_agent_m0_write;                                                  // LCD_RD_s1_agent:m0_write -> LCD_RD_s1_translator:uav_write
	wire          lcd_rd_s1_agent_m0_lock;                                                   // LCD_RD_s1_agent:m0_lock -> LCD_RD_s1_translator:uav_lock
	wire          lcd_rd_s1_agent_m0_read;                                                   // LCD_RD_s1_agent:m0_read -> LCD_RD_s1_translator:uav_read
	wire   [31:0] lcd_rd_s1_agent_m0_readdata;                                               // LCD_RD_s1_translator:uav_readdata -> LCD_RD_s1_agent:m0_readdata
	wire          lcd_rd_s1_agent_m0_readdatavalid;                                          // LCD_RD_s1_translator:uav_readdatavalid -> LCD_RD_s1_agent:m0_readdatavalid
	wire          lcd_rd_s1_agent_m0_debugaccess;                                            // LCD_RD_s1_agent:m0_debugaccess -> LCD_RD_s1_translator:uav_debugaccess
	wire    [3:0] lcd_rd_s1_agent_m0_byteenable;                                             // LCD_RD_s1_agent:m0_byteenable -> LCD_RD_s1_translator:uav_byteenable
	wire          lcd_rd_s1_agent_rf_source_endofpacket;                                     // LCD_RD_s1_agent:rf_source_endofpacket -> LCD_RD_s1_agent_rsp_fifo:in_endofpacket
	wire          lcd_rd_s1_agent_rf_source_valid;                                           // LCD_RD_s1_agent:rf_source_valid -> LCD_RD_s1_agent_rsp_fifo:in_valid
	wire          lcd_rd_s1_agent_rf_source_startofpacket;                                   // LCD_RD_s1_agent:rf_source_startofpacket -> LCD_RD_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] lcd_rd_s1_agent_rf_source_data;                                            // LCD_RD_s1_agent:rf_source_data -> LCD_RD_s1_agent_rsp_fifo:in_data
	wire          lcd_rd_s1_agent_rf_source_ready;                                           // LCD_RD_s1_agent_rsp_fifo:in_ready -> LCD_RD_s1_agent:rf_source_ready
	wire          lcd_rd_s1_agent_rsp_fifo_out_endofpacket;                                  // LCD_RD_s1_agent_rsp_fifo:out_endofpacket -> LCD_RD_s1_agent:rf_sink_endofpacket
	wire          lcd_rd_s1_agent_rsp_fifo_out_valid;                                        // LCD_RD_s1_agent_rsp_fifo:out_valid -> LCD_RD_s1_agent:rf_sink_valid
	wire          lcd_rd_s1_agent_rsp_fifo_out_startofpacket;                                // LCD_RD_s1_agent_rsp_fifo:out_startofpacket -> LCD_RD_s1_agent:rf_sink_startofpacket
	wire  [107:0] lcd_rd_s1_agent_rsp_fifo_out_data;                                         // LCD_RD_s1_agent_rsp_fifo:out_data -> LCD_RD_s1_agent:rf_sink_data
	wire          lcd_rd_s1_agent_rsp_fifo_out_ready;                                        // LCD_RD_s1_agent:rf_sink_ready -> LCD_RD_s1_agent_rsp_fifo:out_ready
	wire          lcd_rd_s1_agent_rdata_fifo_src_valid;                                      // LCD_RD_s1_agent:rdata_fifo_src_valid -> LCD_RD_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_rd_s1_agent_rdata_fifo_src_data;                                       // LCD_RD_s1_agent:rdata_fifo_src_data -> LCD_RD_s1_agent:rdata_fifo_sink_data
	wire          lcd_rd_s1_agent_rdata_fifo_src_ready;                                      // LCD_RD_s1_agent:rdata_fifo_sink_ready -> LCD_RD_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> LCD_RD_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> LCD_RD_s1_agent:cp_valid
	wire          cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> LCD_RD_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> LCD_RD_s1_agent:cp_data
	wire   [20:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> LCD_RD_s1_agent:cp_channel
	wire          cmd_mux_016_src_ready;                                                     // LCD_RD_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire          vs_int_in_s1_agent_m0_waitrequest;                                         // VS_int_in_s1_translator:uav_waitrequest -> VS_int_in_s1_agent:m0_waitrequest
	wire    [2:0] vs_int_in_s1_agent_m0_burstcount;                                          // VS_int_in_s1_agent:m0_burstcount -> VS_int_in_s1_translator:uav_burstcount
	wire   [31:0] vs_int_in_s1_agent_m0_writedata;                                           // VS_int_in_s1_agent:m0_writedata -> VS_int_in_s1_translator:uav_writedata
	wire   [26:0] vs_int_in_s1_agent_m0_address;                                             // VS_int_in_s1_agent:m0_address -> VS_int_in_s1_translator:uav_address
	wire          vs_int_in_s1_agent_m0_write;                                               // VS_int_in_s1_agent:m0_write -> VS_int_in_s1_translator:uav_write
	wire          vs_int_in_s1_agent_m0_lock;                                                // VS_int_in_s1_agent:m0_lock -> VS_int_in_s1_translator:uav_lock
	wire          vs_int_in_s1_agent_m0_read;                                                // VS_int_in_s1_agent:m0_read -> VS_int_in_s1_translator:uav_read
	wire   [31:0] vs_int_in_s1_agent_m0_readdata;                                            // VS_int_in_s1_translator:uav_readdata -> VS_int_in_s1_agent:m0_readdata
	wire          vs_int_in_s1_agent_m0_readdatavalid;                                       // VS_int_in_s1_translator:uav_readdatavalid -> VS_int_in_s1_agent:m0_readdatavalid
	wire          vs_int_in_s1_agent_m0_debugaccess;                                         // VS_int_in_s1_agent:m0_debugaccess -> VS_int_in_s1_translator:uav_debugaccess
	wire    [3:0] vs_int_in_s1_agent_m0_byteenable;                                          // VS_int_in_s1_agent:m0_byteenable -> VS_int_in_s1_translator:uav_byteenable
	wire          vs_int_in_s1_agent_rf_source_endofpacket;                                  // VS_int_in_s1_agent:rf_source_endofpacket -> VS_int_in_s1_agent_rsp_fifo:in_endofpacket
	wire          vs_int_in_s1_agent_rf_source_valid;                                        // VS_int_in_s1_agent:rf_source_valid -> VS_int_in_s1_agent_rsp_fifo:in_valid
	wire          vs_int_in_s1_agent_rf_source_startofpacket;                                // VS_int_in_s1_agent:rf_source_startofpacket -> VS_int_in_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] vs_int_in_s1_agent_rf_source_data;                                         // VS_int_in_s1_agent:rf_source_data -> VS_int_in_s1_agent_rsp_fifo:in_data
	wire          vs_int_in_s1_agent_rf_source_ready;                                        // VS_int_in_s1_agent_rsp_fifo:in_ready -> VS_int_in_s1_agent:rf_source_ready
	wire          vs_int_in_s1_agent_rsp_fifo_out_endofpacket;                               // VS_int_in_s1_agent_rsp_fifo:out_endofpacket -> VS_int_in_s1_agent:rf_sink_endofpacket
	wire          vs_int_in_s1_agent_rsp_fifo_out_valid;                                     // VS_int_in_s1_agent_rsp_fifo:out_valid -> VS_int_in_s1_agent:rf_sink_valid
	wire          vs_int_in_s1_agent_rsp_fifo_out_startofpacket;                             // VS_int_in_s1_agent_rsp_fifo:out_startofpacket -> VS_int_in_s1_agent:rf_sink_startofpacket
	wire  [107:0] vs_int_in_s1_agent_rsp_fifo_out_data;                                      // VS_int_in_s1_agent_rsp_fifo:out_data -> VS_int_in_s1_agent:rf_sink_data
	wire          vs_int_in_s1_agent_rsp_fifo_out_ready;                                     // VS_int_in_s1_agent:rf_sink_ready -> VS_int_in_s1_agent_rsp_fifo:out_ready
	wire          vs_int_in_s1_agent_rdata_fifo_src_valid;                                   // VS_int_in_s1_agent:rdata_fifo_src_valid -> VS_int_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] vs_int_in_s1_agent_rdata_fifo_src_data;                                    // VS_int_in_s1_agent:rdata_fifo_src_data -> VS_int_in_s1_agent:rdata_fifo_sink_data
	wire          vs_int_in_s1_agent_rdata_fifo_src_ready;                                   // VS_int_in_s1_agent:rdata_fifo_sink_ready -> VS_int_in_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> VS_int_in_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> VS_int_in_s1_agent:cp_valid
	wire          cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> VS_int_in_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> VS_int_in_s1_agent:cp_data
	wire   [20:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> VS_int_in_s1_agent:cp_channel
	wire          cmd_mux_017_src_ready;                                                     // VS_int_in_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire          performance_counter_control_slave_agent_m0_waitrequest;                    // performance_counter_control_slave_translator:uav_waitrequest -> performance_counter_control_slave_agent:m0_waitrequest
	wire    [2:0] performance_counter_control_slave_agent_m0_burstcount;                     // performance_counter_control_slave_agent:m0_burstcount -> performance_counter_control_slave_translator:uav_burstcount
	wire   [31:0] performance_counter_control_slave_agent_m0_writedata;                      // performance_counter_control_slave_agent:m0_writedata -> performance_counter_control_slave_translator:uav_writedata
	wire   [26:0] performance_counter_control_slave_agent_m0_address;                        // performance_counter_control_slave_agent:m0_address -> performance_counter_control_slave_translator:uav_address
	wire          performance_counter_control_slave_agent_m0_write;                          // performance_counter_control_slave_agent:m0_write -> performance_counter_control_slave_translator:uav_write
	wire          performance_counter_control_slave_agent_m0_lock;                           // performance_counter_control_slave_agent:m0_lock -> performance_counter_control_slave_translator:uav_lock
	wire          performance_counter_control_slave_agent_m0_read;                           // performance_counter_control_slave_agent:m0_read -> performance_counter_control_slave_translator:uav_read
	wire   [31:0] performance_counter_control_slave_agent_m0_readdata;                       // performance_counter_control_slave_translator:uav_readdata -> performance_counter_control_slave_agent:m0_readdata
	wire          performance_counter_control_slave_agent_m0_readdatavalid;                  // performance_counter_control_slave_translator:uav_readdatavalid -> performance_counter_control_slave_agent:m0_readdatavalid
	wire          performance_counter_control_slave_agent_m0_debugaccess;                    // performance_counter_control_slave_agent:m0_debugaccess -> performance_counter_control_slave_translator:uav_debugaccess
	wire    [3:0] performance_counter_control_slave_agent_m0_byteenable;                     // performance_counter_control_slave_agent:m0_byteenable -> performance_counter_control_slave_translator:uav_byteenable
	wire          performance_counter_control_slave_agent_rf_source_endofpacket;             // performance_counter_control_slave_agent:rf_source_endofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire          performance_counter_control_slave_agent_rf_source_valid;                   // performance_counter_control_slave_agent:rf_source_valid -> performance_counter_control_slave_agent_rsp_fifo:in_valid
	wire          performance_counter_control_slave_agent_rf_source_startofpacket;           // performance_counter_control_slave_agent:rf_source_startofpacket -> performance_counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [107:0] performance_counter_control_slave_agent_rf_source_data;                    // performance_counter_control_slave_agent:rf_source_data -> performance_counter_control_slave_agent_rsp_fifo:in_data
	wire          performance_counter_control_slave_agent_rf_source_ready;                   // performance_counter_control_slave_agent_rsp_fifo:in_ready -> performance_counter_control_slave_agent:rf_source_ready
	wire          performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;          // performance_counter_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_control_slave_agent:rf_sink_endofpacket
	wire          performance_counter_control_slave_agent_rsp_fifo_out_valid;                // performance_counter_control_slave_agent_rsp_fifo:out_valid -> performance_counter_control_slave_agent:rf_sink_valid
	wire          performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;        // performance_counter_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_control_slave_agent:rf_sink_startofpacket
	wire  [107:0] performance_counter_control_slave_agent_rsp_fifo_out_data;                 // performance_counter_control_slave_agent_rsp_fifo:out_data -> performance_counter_control_slave_agent:rf_sink_data
	wire          performance_counter_control_slave_agent_rsp_fifo_out_ready;                // performance_counter_control_slave_agent:rf_sink_ready -> performance_counter_control_slave_agent_rsp_fifo:out_ready
	wire          performance_counter_control_slave_agent_rdata_fifo_src_valid;              // performance_counter_control_slave_agent:rdata_fifo_src_valid -> performance_counter_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] performance_counter_control_slave_agent_rdata_fifo_src_data;               // performance_counter_control_slave_agent:rdata_fifo_src_data -> performance_counter_control_slave_agent:rdata_fifo_sink_data
	wire          performance_counter_control_slave_agent_rdata_fifo_src_ready;              // performance_counter_control_slave_agent:rdata_fifo_sink_ready -> performance_counter_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> performance_counter_control_slave_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> performance_counter_control_slave_agent:cp_valid
	wire          cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> performance_counter_control_slave_agent:cp_startofpacket
	wire  [106:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> performance_counter_control_slave_agent:cp_data
	wire   [20:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> performance_counter_control_slave_agent:cp_channel
	wire          cmd_mux_018_src_ready;                                                     // performance_counter_control_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire          sm_2strobe_s1_agent_m0_waitrequest;                                        // SM_2strobe_s1_translator:uav_waitrequest -> SM_2strobe_s1_agent:m0_waitrequest
	wire    [2:0] sm_2strobe_s1_agent_m0_burstcount;                                         // SM_2strobe_s1_agent:m0_burstcount -> SM_2strobe_s1_translator:uav_burstcount
	wire   [31:0] sm_2strobe_s1_agent_m0_writedata;                                          // SM_2strobe_s1_agent:m0_writedata -> SM_2strobe_s1_translator:uav_writedata
	wire   [26:0] sm_2strobe_s1_agent_m0_address;                                            // SM_2strobe_s1_agent:m0_address -> SM_2strobe_s1_translator:uav_address
	wire          sm_2strobe_s1_agent_m0_write;                                              // SM_2strobe_s1_agent:m0_write -> SM_2strobe_s1_translator:uav_write
	wire          sm_2strobe_s1_agent_m0_lock;                                               // SM_2strobe_s1_agent:m0_lock -> SM_2strobe_s1_translator:uav_lock
	wire          sm_2strobe_s1_agent_m0_read;                                               // SM_2strobe_s1_agent:m0_read -> SM_2strobe_s1_translator:uav_read
	wire   [31:0] sm_2strobe_s1_agent_m0_readdata;                                           // SM_2strobe_s1_translator:uav_readdata -> SM_2strobe_s1_agent:m0_readdata
	wire          sm_2strobe_s1_agent_m0_readdatavalid;                                      // SM_2strobe_s1_translator:uav_readdatavalid -> SM_2strobe_s1_agent:m0_readdatavalid
	wire          sm_2strobe_s1_agent_m0_debugaccess;                                        // SM_2strobe_s1_agent:m0_debugaccess -> SM_2strobe_s1_translator:uav_debugaccess
	wire    [3:0] sm_2strobe_s1_agent_m0_byteenable;                                         // SM_2strobe_s1_agent:m0_byteenable -> SM_2strobe_s1_translator:uav_byteenable
	wire          sm_2strobe_s1_agent_rf_source_endofpacket;                                 // SM_2strobe_s1_agent:rf_source_endofpacket -> SM_2strobe_s1_agent_rsp_fifo:in_endofpacket
	wire          sm_2strobe_s1_agent_rf_source_valid;                                       // SM_2strobe_s1_agent:rf_source_valid -> SM_2strobe_s1_agent_rsp_fifo:in_valid
	wire          sm_2strobe_s1_agent_rf_source_startofpacket;                               // SM_2strobe_s1_agent:rf_source_startofpacket -> SM_2strobe_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] sm_2strobe_s1_agent_rf_source_data;                                        // SM_2strobe_s1_agent:rf_source_data -> SM_2strobe_s1_agent_rsp_fifo:in_data
	wire          sm_2strobe_s1_agent_rf_source_ready;                                       // SM_2strobe_s1_agent_rsp_fifo:in_ready -> SM_2strobe_s1_agent:rf_source_ready
	wire          sm_2strobe_s1_agent_rsp_fifo_out_endofpacket;                              // SM_2strobe_s1_agent_rsp_fifo:out_endofpacket -> SM_2strobe_s1_agent:rf_sink_endofpacket
	wire          sm_2strobe_s1_agent_rsp_fifo_out_valid;                                    // SM_2strobe_s1_agent_rsp_fifo:out_valid -> SM_2strobe_s1_agent:rf_sink_valid
	wire          sm_2strobe_s1_agent_rsp_fifo_out_startofpacket;                            // SM_2strobe_s1_agent_rsp_fifo:out_startofpacket -> SM_2strobe_s1_agent:rf_sink_startofpacket
	wire  [107:0] sm_2strobe_s1_agent_rsp_fifo_out_data;                                     // SM_2strobe_s1_agent_rsp_fifo:out_data -> SM_2strobe_s1_agent:rf_sink_data
	wire          sm_2strobe_s1_agent_rsp_fifo_out_ready;                                    // SM_2strobe_s1_agent:rf_sink_ready -> SM_2strobe_s1_agent_rsp_fifo:out_ready
	wire          sm_2strobe_s1_agent_rdata_fifo_src_valid;                                  // SM_2strobe_s1_agent:rdata_fifo_src_valid -> SM_2strobe_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sm_2strobe_s1_agent_rdata_fifo_src_data;                                   // SM_2strobe_s1_agent:rdata_fifo_src_data -> SM_2strobe_s1_agent:rdata_fifo_sink_data
	wire          sm_2strobe_s1_agent_rdata_fifo_src_ready;                                  // SM_2strobe_s1_agent:rdata_fifo_sink_ready -> SM_2strobe_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_endofpacket;                                               // cmd_mux_019:src_endofpacket -> SM_2strobe_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                     // cmd_mux_019:src_valid -> SM_2strobe_s1_agent:cp_valid
	wire          cmd_mux_019_src_startofpacket;                                             // cmd_mux_019:src_startofpacket -> SM_2strobe_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_019_src_data;                                                      // cmd_mux_019:src_data -> SM_2strobe_s1_agent:cp_data
	wire   [20:0] cmd_mux_019_src_channel;                                                   // cmd_mux_019:src_channel -> SM_2strobe_s1_agent:cp_channel
	wire          cmd_mux_019_src_ready;                                                     // SM_2strobe_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire          scl_s1_agent_m0_waitrequest;                                               // SCL_s1_translator:uav_waitrequest -> SCL_s1_agent:m0_waitrequest
	wire    [2:0] scl_s1_agent_m0_burstcount;                                                // SCL_s1_agent:m0_burstcount -> SCL_s1_translator:uav_burstcount
	wire   [31:0] scl_s1_agent_m0_writedata;                                                 // SCL_s1_agent:m0_writedata -> SCL_s1_translator:uav_writedata
	wire   [26:0] scl_s1_agent_m0_address;                                                   // SCL_s1_agent:m0_address -> SCL_s1_translator:uav_address
	wire          scl_s1_agent_m0_write;                                                     // SCL_s1_agent:m0_write -> SCL_s1_translator:uav_write
	wire          scl_s1_agent_m0_lock;                                                      // SCL_s1_agent:m0_lock -> SCL_s1_translator:uav_lock
	wire          scl_s1_agent_m0_read;                                                      // SCL_s1_agent:m0_read -> SCL_s1_translator:uav_read
	wire   [31:0] scl_s1_agent_m0_readdata;                                                  // SCL_s1_translator:uav_readdata -> SCL_s1_agent:m0_readdata
	wire          scl_s1_agent_m0_readdatavalid;                                             // SCL_s1_translator:uav_readdatavalid -> SCL_s1_agent:m0_readdatavalid
	wire          scl_s1_agent_m0_debugaccess;                                               // SCL_s1_agent:m0_debugaccess -> SCL_s1_translator:uav_debugaccess
	wire    [3:0] scl_s1_agent_m0_byteenable;                                                // SCL_s1_agent:m0_byteenable -> SCL_s1_translator:uav_byteenable
	wire          scl_s1_agent_rf_source_endofpacket;                                        // SCL_s1_agent:rf_source_endofpacket -> SCL_s1_agent_rsp_fifo:in_endofpacket
	wire          scl_s1_agent_rf_source_valid;                                              // SCL_s1_agent:rf_source_valid -> SCL_s1_agent_rsp_fifo:in_valid
	wire          scl_s1_agent_rf_source_startofpacket;                                      // SCL_s1_agent:rf_source_startofpacket -> SCL_s1_agent_rsp_fifo:in_startofpacket
	wire  [107:0] scl_s1_agent_rf_source_data;                                               // SCL_s1_agent:rf_source_data -> SCL_s1_agent_rsp_fifo:in_data
	wire          scl_s1_agent_rf_source_ready;                                              // SCL_s1_agent_rsp_fifo:in_ready -> SCL_s1_agent:rf_source_ready
	wire          scl_s1_agent_rsp_fifo_out_endofpacket;                                     // SCL_s1_agent_rsp_fifo:out_endofpacket -> SCL_s1_agent:rf_sink_endofpacket
	wire          scl_s1_agent_rsp_fifo_out_valid;                                           // SCL_s1_agent_rsp_fifo:out_valid -> SCL_s1_agent:rf_sink_valid
	wire          scl_s1_agent_rsp_fifo_out_startofpacket;                                   // SCL_s1_agent_rsp_fifo:out_startofpacket -> SCL_s1_agent:rf_sink_startofpacket
	wire  [107:0] scl_s1_agent_rsp_fifo_out_data;                                            // SCL_s1_agent_rsp_fifo:out_data -> SCL_s1_agent:rf_sink_data
	wire          scl_s1_agent_rsp_fifo_out_ready;                                           // SCL_s1_agent:rf_sink_ready -> SCL_s1_agent_rsp_fifo:out_ready
	wire          scl_s1_agent_rdata_fifo_src_valid;                                         // SCL_s1_agent:rdata_fifo_src_valid -> SCL_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] scl_s1_agent_rdata_fifo_src_data;                                          // SCL_s1_agent:rdata_fifo_src_data -> SCL_s1_agent:rdata_fifo_sink_data
	wire          scl_s1_agent_rdata_fifo_src_ready;                                         // SCL_s1_agent:rdata_fifo_sink_ready -> SCL_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_endofpacket;                                               // cmd_mux_020:src_endofpacket -> SCL_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                     // cmd_mux_020:src_valid -> SCL_s1_agent:cp_valid
	wire          cmd_mux_020_src_startofpacket;                                             // cmd_mux_020:src_startofpacket -> SCL_s1_agent:cp_startofpacket
	wire  [106:0] cmd_mux_020_src_data;                                                      // cmd_mux_020:src_data -> SCL_s1_agent:cp_data
	wire   [20:0] cmd_mux_020_src_channel;                                                   // cmd_mux_020:src_channel -> SCL_s1_agent:cp_channel
	wire          cmd_mux_020_src_ready;                                                     // SCL_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire          cpu_instruction_master_agent_cp_endofpacket;                               // CPU_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                     // CPU_instruction_master_agent:cp_valid -> router:sink_valid
	wire          cpu_instruction_master_agent_cp_startofpacket;                             // CPU_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [106:0] cpu_instruction_master_agent_cp_data;                                      // CPU_instruction_master_agent:cp_data -> router:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                     // router:sink_ready -> CPU_instruction_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_endofpacket;                                      // CPU_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                            // CPU_data_master_agent:cp_valid -> router_001:sink_valid
	wire          cpu_data_master_agent_cp_startofpacket;                                    // CPU_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [106:0] cpu_data_master_agent_cp_data;                                             // CPU_data_master_agent:cp_data -> router_001:sink_data
	wire          cpu_data_master_agent_cp_ready;                                            // router_001:sink_ready -> CPU_data_master_agent:cp_ready
	wire          cpu_jtag_debug_module_agent_rp_endofpacket;                                // CPU_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          cpu_jtag_debug_module_agent_rp_valid;                                      // CPU_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire          cpu_jtag_debug_module_agent_rp_startofpacket;                              // CPU_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [106:0] cpu_jtag_debug_module_agent_rp_data;                                       // CPU_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire          cpu_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> CPU_jtag_debug_module_agent:rp_ready
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [106:0] router_002_src_data;                                                       // router_002:src_data -> rsp_demux:sink_data
	wire   [20:0] router_002_src_channel;                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_ready;                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire          sdram_s1_agent_rp_endofpacket;                                             // sdram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                   // sdram_s1_agent:rp_valid -> router_003:sink_valid
	wire          sdram_s1_agent_rp_startofpacket;                                           // sdram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire   [88:0] sdram_s1_agent_rp_data;                                                    // sdram_s1_agent:rp_data -> router_003:sink_data
	wire          sdram_s1_agent_rp_ready;                                                   // router_003:sink_ready -> sdram_s1_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [106:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                // router_004:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [106:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire   [20:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_ready;                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire          pio_led_s1_agent_rp_endofpacket;                                           // pio_led_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          pio_led_s1_agent_rp_valid;                                                 // pio_led_s1_agent:rp_valid -> router_005:sink_valid
	wire          pio_led_s1_agent_rp_startofpacket;                                         // pio_led_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [106:0] pio_led_s1_agent_rp_data;                                                  // pio_led_s1_agent:rp_data -> router_005:sink_data
	wire          pio_led_s1_agent_rp_ready;                                                 // router_005:sink_ready -> pio_led_s1_agent:rp_ready
	wire          router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire          router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [106:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire   [20:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_ready;                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                             // sysid_qsys_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                   // sysid_qsys_control_slave_agent:rp_valid -> router_006:sink_valid
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                           // sysid_qsys_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [106:0] sysid_qsys_control_slave_agent_rp_data;                                    // sysid_qsys_control_slave_agent:rp_data -> router_006:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                   // router_006:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire          router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [106:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire   [20:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_ready;                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire          onchip_memory_s1_agent_rp_endofpacket;                                     // onchip_memory_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                           // onchip_memory_s1_agent:rp_valid -> router_007:sink_valid
	wire          onchip_memory_s1_agent_rp_startofpacket;                                   // onchip_memory_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [106:0] onchip_memory_s1_agent_rp_data;                                            // onchip_memory_s1_agent:rp_data -> router_007:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                           // router_007:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire          router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [106:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire   [20:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_ready;                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire          lcd_data_out_s1_agent_rp_endofpacket;                                      // LCD_DATA_OUT_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          lcd_data_out_s1_agent_rp_valid;                                            // LCD_DATA_OUT_s1_agent:rp_valid -> router_008:sink_valid
	wire          lcd_data_out_s1_agent_rp_startofpacket;                                    // LCD_DATA_OUT_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [106:0] lcd_data_out_s1_agent_rp_data;                                             // LCD_DATA_OUT_s1_agent:rp_data -> router_008:sink_data
	wire          lcd_data_out_s1_agent_rp_ready;                                            // router_008:sink_ready -> LCD_DATA_OUT_s1_agent:rp_ready
	wire          router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire          router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [106:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire   [20:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_ready;                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire          lcd_rs_s1_agent_rp_endofpacket;                                            // LCD_RS_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          lcd_rs_s1_agent_rp_valid;                                                  // LCD_RS_s1_agent:rp_valid -> router_009:sink_valid
	wire          lcd_rs_s1_agent_rp_startofpacket;                                          // LCD_RS_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [106:0] lcd_rs_s1_agent_rp_data;                                                   // LCD_RS_s1_agent:rp_data -> router_009:sink_data
	wire          lcd_rs_s1_agent_rp_ready;                                                  // router_009:sink_ready -> LCD_RS_s1_agent:rp_ready
	wire          router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire          router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [106:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire   [20:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_ready;                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire          lcd_wr_s1_agent_rp_endofpacket;                                            // LCD_WR_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          lcd_wr_s1_agent_rp_valid;                                                  // LCD_WR_s1_agent:rp_valid -> router_010:sink_valid
	wire          lcd_wr_s1_agent_rp_startofpacket;                                          // LCD_WR_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [106:0] lcd_wr_s1_agent_rp_data;                                                   // LCD_WR_s1_agent:rp_data -> router_010:sink_data
	wire          lcd_wr_s1_agent_rp_ready;                                                  // router_010:sink_ready -> LCD_WR_s1_agent:rp_ready
	wire          router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire          router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [106:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire   [20:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_ready;                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire          lcd_cs_s1_agent_rp_endofpacket;                                            // LCD_CS_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          lcd_cs_s1_agent_rp_valid;                                                  // LCD_CS_s1_agent:rp_valid -> router_011:sink_valid
	wire          lcd_cs_s1_agent_rp_startofpacket;                                          // LCD_CS_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [106:0] lcd_cs_s1_agent_rp_data;                                                   // LCD_CS_s1_agent:rp_data -> router_011:sink_data
	wire          lcd_cs_s1_agent_rp_ready;                                                  // router_011:sink_ready -> LCD_CS_s1_agent:rp_ready
	wire          router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire          router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [106:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire   [20:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_ready;                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire          lcd_reset_s1_agent_rp_endofpacket;                                         // LCD_RESET_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          lcd_reset_s1_agent_rp_valid;                                               // LCD_RESET_s1_agent:rp_valid -> router_012:sink_valid
	wire          lcd_reset_s1_agent_rp_startofpacket;                                       // LCD_RESET_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [106:0] lcd_reset_s1_agent_rp_data;                                                // LCD_RESET_s1_agent:rp_data -> router_012:sink_data
	wire          lcd_reset_s1_agent_rp_ready;                                               // router_012:sink_ready -> LCD_RESET_s1_agent:rp_ready
	wire          router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_010:sink_valid
	wire          router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [106:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_010:sink_data
	wire   [20:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_ready;                                                      // rsp_demux_010:sink_ready -> router_012:src_ready
	wire          sda_s1_agent_rp_endofpacket;                                               // SDA_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          sda_s1_agent_rp_valid;                                                     // SDA_s1_agent:rp_valid -> router_013:sink_valid
	wire          sda_s1_agent_rp_startofpacket;                                             // SDA_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [106:0] sda_s1_agent_rp_data;                                                      // SDA_s1_agent:rp_data -> router_013:sink_data
	wire          sda_s1_agent_rp_ready;                                                     // router_013:sink_ready -> SDA_s1_agent:rp_ready
	wire          router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_011:sink_valid
	wire          router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [106:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_011:sink_data
	wire   [20:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_ready;                                                      // rsp_demux_011:sink_ready -> router_013:src_ready
	wire          sm_1clr_s1_agent_rp_endofpacket;                                           // SM_1clr_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          sm_1clr_s1_agent_rp_valid;                                                 // SM_1clr_s1_agent:rp_valid -> router_014:sink_valid
	wire          sm_1clr_s1_agent_rp_startofpacket;                                         // SM_1clr_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [106:0] sm_1clr_s1_agent_rp_data;                                                  // SM_1clr_s1_agent:rp_data -> router_014:sink_data
	wire          sm_1clr_s1_agent_rp_ready;                                                 // router_014:sink_ready -> SM_1clr_s1_agent:rp_ready
	wire          router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_012:sink_valid
	wire          router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [106:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_012:sink_data
	wire   [20:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_ready;                                                      // rsp_demux_012:sink_ready -> router_014:src_ready
	wire          sm_1ena_s1_agent_rp_endofpacket;                                           // SM_1ena_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          sm_1ena_s1_agent_rp_valid;                                                 // SM_1ena_s1_agent:rp_valid -> router_015:sink_valid
	wire          sm_1ena_s1_agent_rp_startofpacket;                                         // SM_1ena_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [106:0] sm_1ena_s1_agent_rp_data;                                                  // SM_1ena_s1_agent:rp_data -> router_015:sink_data
	wire          sm_1ena_s1_agent_rp_ready;                                                 // router_015:sink_ready -> SM_1ena_s1_agent:rp_ready
	wire          router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_013:sink_valid
	wire          router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [106:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_013:sink_data
	wire   [20:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_ready;                                                      // rsp_demux_013:sink_ready -> router_015:src_ready
	wire          sm_mux_s1_agent_rp_endofpacket;                                            // SM_mux_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          sm_mux_s1_agent_rp_valid;                                                  // SM_mux_s1_agent:rp_valid -> router_016:sink_valid
	wire          sm_mux_s1_agent_rp_startofpacket;                                          // SM_mux_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [106:0] sm_mux_s1_agent_rp_data;                                                   // SM_mux_s1_agent:rp_data -> router_016:sink_data
	wire          sm_mux_s1_agent_rp_ready;                                                  // router_016:sink_ready -> SM_mux_s1_agent:rp_ready
	wire          router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_014:sink_valid
	wire          router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [106:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_014:sink_data
	wire   [20:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_ready;                                                      // rsp_demux_014:sink_ready -> router_016:src_ready
	wire          sm_data_in_s1_agent_rp_endofpacket;                                        // SM_data_in_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          sm_data_in_s1_agent_rp_valid;                                              // SM_data_in_s1_agent:rp_valid -> router_017:sink_valid
	wire          sm_data_in_s1_agent_rp_startofpacket;                                      // SM_data_in_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [106:0] sm_data_in_s1_agent_rp_data;                                               // SM_data_in_s1_agent:rp_data -> router_017:sink_data
	wire          sm_data_in_s1_agent_rp_ready;                                              // router_017:sink_ready -> SM_data_in_s1_agent:rp_ready
	wire          router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_015:sink_valid
	wire          router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire  [106:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_015:sink_data
	wire   [20:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_ready;                                                      // rsp_demux_015:sink_ready -> router_017:src_ready
	wire          lcd_rd_s1_agent_rp_endofpacket;                                            // LCD_RD_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          lcd_rd_s1_agent_rp_valid;                                                  // LCD_RD_s1_agent:rp_valid -> router_018:sink_valid
	wire          lcd_rd_s1_agent_rp_startofpacket;                                          // LCD_RD_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [106:0] lcd_rd_s1_agent_rp_data;                                                   // LCD_RD_s1_agent:rp_data -> router_018:sink_data
	wire          lcd_rd_s1_agent_rp_ready;                                                  // router_018:sink_ready -> LCD_RD_s1_agent:rp_ready
	wire          router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_016:sink_valid
	wire          router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire  [106:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_016:sink_data
	wire   [20:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_ready;                                                      // rsp_demux_016:sink_ready -> router_018:src_ready
	wire          vs_int_in_s1_agent_rp_endofpacket;                                         // VS_int_in_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          vs_int_in_s1_agent_rp_valid;                                               // VS_int_in_s1_agent:rp_valid -> router_019:sink_valid
	wire          vs_int_in_s1_agent_rp_startofpacket;                                       // VS_int_in_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [106:0] vs_int_in_s1_agent_rp_data;                                                // VS_int_in_s1_agent:rp_data -> router_019:sink_data
	wire          vs_int_in_s1_agent_rp_ready;                                               // router_019:sink_ready -> VS_int_in_s1_agent:rp_ready
	wire          router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_017:sink_valid
	wire          router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire  [106:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_017:sink_data
	wire   [20:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_ready;                                                      // rsp_demux_017:sink_ready -> router_019:src_ready
	wire          performance_counter_control_slave_agent_rp_endofpacket;                    // performance_counter_control_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          performance_counter_control_slave_agent_rp_valid;                          // performance_counter_control_slave_agent:rp_valid -> router_020:sink_valid
	wire          performance_counter_control_slave_agent_rp_startofpacket;                  // performance_counter_control_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire  [106:0] performance_counter_control_slave_agent_rp_data;                           // performance_counter_control_slave_agent:rp_data -> router_020:sink_data
	wire          performance_counter_control_slave_agent_rp_ready;                          // router_020:sink_ready -> performance_counter_control_slave_agent:rp_ready
	wire          router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_018:sink_valid
	wire          router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire  [106:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_018:sink_data
	wire   [20:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_ready;                                                      // rsp_demux_018:sink_ready -> router_020:src_ready
	wire          sm_2strobe_s1_agent_rp_endofpacket;                                        // SM_2strobe_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          sm_2strobe_s1_agent_rp_valid;                                              // SM_2strobe_s1_agent:rp_valid -> router_021:sink_valid
	wire          sm_2strobe_s1_agent_rp_startofpacket;                                      // SM_2strobe_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire  [106:0] sm_2strobe_s1_agent_rp_data;                                               // SM_2strobe_s1_agent:rp_data -> router_021:sink_data
	wire          sm_2strobe_s1_agent_rp_ready;                                              // router_021:sink_ready -> SM_2strobe_s1_agent:rp_ready
	wire          router_021_src_endofpacket;                                                // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_021_src_valid;                                                      // router_021:src_valid -> rsp_demux_019:sink_valid
	wire          router_021_src_startofpacket;                                              // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire  [106:0] router_021_src_data;                                                       // router_021:src_data -> rsp_demux_019:sink_data
	wire   [20:0] router_021_src_channel;                                                    // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_ready;                                                      // rsp_demux_019:sink_ready -> router_021:src_ready
	wire          scl_s1_agent_rp_endofpacket;                                               // SCL_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          scl_s1_agent_rp_valid;                                                     // SCL_s1_agent:rp_valid -> router_022:sink_valid
	wire          scl_s1_agent_rp_startofpacket;                                             // SCL_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire  [106:0] scl_s1_agent_rp_data;                                                      // SCL_s1_agent:rp_data -> router_022:sink_data
	wire          scl_s1_agent_rp_ready;                                                     // router_022:sink_ready -> SCL_s1_agent:rp_ready
	wire          router_022_src_endofpacket;                                                // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_022_src_valid;                                                      // router_022:src_valid -> rsp_demux_020:sink_valid
	wire          router_022_src_startofpacket;                                              // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire  [106:0] router_022_src_data;                                                       // router_022:src_data -> rsp_demux_020:sink_data
	wire   [20:0] router_022_src_channel;                                                    // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_ready;                                                      // rsp_demux_020:sink_ready -> router_022:src_ready
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> CPU_instruction_master_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> CPU_instruction_master_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> CPU_instruction_master_limiter:cmd_sink_startofpacket
	wire  [106:0] router_src_data;                                                           // router:src_data -> CPU_instruction_master_limiter:cmd_sink_data
	wire   [20:0] router_src_channel;                                                        // router:src_channel -> CPU_instruction_master_limiter:cmd_sink_channel
	wire          router_src_ready;                                                          // CPU_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                        // CPU_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                      // CPU_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [106:0] cpu_instruction_master_limiter_cmd_src_data;                               // CPU_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire   [20:0] cpu_instruction_master_limiter_cmd_src_channel;                            // CPU_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> CPU_instruction_master_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> CPU_instruction_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> CPU_instruction_master_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> CPU_instruction_master_limiter:rsp_sink_startofpacket
	wire  [106:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> CPU_instruction_master_limiter:rsp_sink_data
	wire   [20:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> CPU_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                         // CPU_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                        // CPU_instruction_master_limiter:rsp_src_endofpacket -> CPU_instruction_master_agent:rp_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                              // CPU_instruction_master_limiter:rsp_src_valid -> CPU_instruction_master_agent:rp_valid
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                      // CPU_instruction_master_limiter:rsp_src_startofpacket -> CPU_instruction_master_agent:rp_startofpacket
	wire  [106:0] cpu_instruction_master_limiter_rsp_src_data;                               // CPU_instruction_master_limiter:rsp_src_data -> CPU_instruction_master_agent:rp_data
	wire   [20:0] cpu_instruction_master_limiter_rsp_src_channel;                            // CPU_instruction_master_limiter:rsp_src_channel -> CPU_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_ready;                              // CPU_instruction_master_agent:rp_ready -> CPU_instruction_master_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> CPU_data_master_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> CPU_data_master_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> CPU_data_master_limiter:cmd_sink_startofpacket
	wire  [106:0] router_001_src_data;                                                       // router_001:src_data -> CPU_data_master_limiter:cmd_sink_data
	wire   [20:0] router_001_src_channel;                                                    // router_001:src_channel -> CPU_data_master_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                                      // CPU_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                               // CPU_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                             // CPU_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [106:0] cpu_data_master_limiter_cmd_src_data;                                      // CPU_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire   [20:0] cpu_data_master_limiter_cmd_src_channel;                                   // CPU_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_data_master_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> CPU_data_master_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> CPU_data_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> CPU_data_master_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> CPU_data_master_limiter:rsp_sink_startofpacket
	wire  [106:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> CPU_data_master_limiter:rsp_sink_data
	wire   [20:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> CPU_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                                     // CPU_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                               // CPU_data_master_limiter:rsp_src_endofpacket -> CPU_data_master_agent:rp_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                     // CPU_data_master_limiter:rsp_src_valid -> CPU_data_master_agent:rp_valid
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                             // CPU_data_master_limiter:rsp_src_startofpacket -> CPU_data_master_agent:rp_startofpacket
	wire  [106:0] cpu_data_master_limiter_rsp_src_data;                                      // CPU_data_master_limiter:rsp_src_data -> CPU_data_master_agent:rp_data
	wire   [20:0] cpu_data_master_limiter_rsp_src_channel;                                   // CPU_data_master_limiter:rsp_src_channel -> CPU_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_ready;                                     // CPU_data_master_agent:rp_ready -> CPU_data_master_limiter:rsp_src_ready
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                      // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire          sdram_s1_burst_adapter_source0_startofpacket;                              // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire   [88:0] sdram_s1_burst_adapter_source0_data;                                       // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                      // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [20:0] sdram_s1_burst_adapter_source0_channel;                                    // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [106:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [20:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [106:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [20:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [106:0] cmd_demux_src2_data;                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire   [20:0] cmd_demux_src2_channel;                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src3_endofpacket;                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_src3_startofpacket;                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [106:0] cmd_demux_src3_data;                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire   [20:0] cmd_demux_src3_channel;                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_ready;                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire          cmd_demux_src4_endofpacket;                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [106:0] cmd_demux_src4_data;                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire   [20:0] cmd_demux_src4_channel;                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src5_endofpacket;                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [106:0] cmd_demux_src5_data;                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire   [20:0] cmd_demux_src5_channel;                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          cmd_demux_src6_endofpacket;                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire          cmd_demux_src6_startofpacket;                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [106:0] cmd_demux_src6_data;                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire   [20:0] cmd_demux_src6_channel;                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_ready;                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire          cmd_demux_src7_endofpacket;                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire          cmd_demux_src7_startofpacket;                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [106:0] cmd_demux_src7_data;                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire   [20:0] cmd_demux_src7_channel;                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_ready;                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire          cmd_demux_src8_endofpacket;                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire          cmd_demux_src8_startofpacket;                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [106:0] cmd_demux_src8_data;                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire   [20:0] cmd_demux_src8_channel;                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_ready;                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire          cmd_demux_src9_endofpacket;                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire          cmd_demux_src9_startofpacket;                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [106:0] cmd_demux_src9_data;                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire   [20:0] cmd_demux_src9_channel;                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_ready;                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire          cmd_demux_src10_endofpacket;                                               // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                     // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire          cmd_demux_src10_startofpacket;                                             // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [106:0] cmd_demux_src10_data;                                                      // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire   [20:0] cmd_demux_src10_channel;                                                   // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_ready;                                                     // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire          cmd_demux_src11_endofpacket;                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire          cmd_demux_src11_startofpacket;                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [106:0] cmd_demux_src11_data;                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire   [20:0] cmd_demux_src11_channel;                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_ready;                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire          cmd_demux_src12_endofpacket;                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire          cmd_demux_src12_startofpacket;                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [106:0] cmd_demux_src12_data;                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire   [20:0] cmd_demux_src12_channel;                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_ready;                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire          cmd_demux_src13_endofpacket;                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire          cmd_demux_src13_startofpacket;                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [106:0] cmd_demux_src13_data;                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire   [20:0] cmd_demux_src13_channel;                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_ready;                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire          cmd_demux_src14_endofpacket;                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire          cmd_demux_src14_startofpacket;                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [106:0] cmd_demux_src14_data;                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire   [20:0] cmd_demux_src14_channel;                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_ready;                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire          cmd_demux_src15_endofpacket;                                               // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                     // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire          cmd_demux_src15_startofpacket;                                             // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire  [106:0] cmd_demux_src15_data;                                                      // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire   [20:0] cmd_demux_src15_channel;                                                   // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_ready;                                                     // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire          cmd_demux_src16_endofpacket;                                               // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                     // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire          cmd_demux_src16_startofpacket;                                             // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire  [106:0] cmd_demux_src16_data;                                                      // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire   [20:0] cmd_demux_src16_channel;                                                   // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_ready;                                                     // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire          cmd_demux_src17_endofpacket;                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire          cmd_demux_src17_startofpacket;                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire  [106:0] cmd_demux_src17_data;                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire   [20:0] cmd_demux_src17_channel;                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_ready;                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire          cmd_demux_src18_endofpacket;                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire          cmd_demux_src18_startofpacket;                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire  [106:0] cmd_demux_src18_data;                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire   [20:0] cmd_demux_src18_channel;                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_ready;                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire          cmd_demux_src19_endofpacket;                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire          cmd_demux_src19_startofpacket;                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire  [106:0] cmd_demux_src19_data;                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire   [20:0] cmd_demux_src19_channel;                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_ready;                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire          cmd_demux_src20_endofpacket;                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire          cmd_demux_src20_startofpacket;                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire  [106:0] cmd_demux_src20_data;                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire   [20:0] cmd_demux_src20_channel;                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_ready;                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire   [20:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire          cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire   [20:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_ready;                                                  // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire          cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire          cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire   [20:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_ready;                                                  // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire          cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire          cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire   [20:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_ready;                                                  // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire          cmd_demux_001_src4_endofpacket;                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                  // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire          cmd_demux_001_src4_startofpacket;                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src4_data;                                                   // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire   [20:0] cmd_demux_001_src4_channel;                                                // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_ready;                                                  // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire          cmd_demux_001_src5_endofpacket;                                            // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                  // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire          cmd_demux_001_src5_startofpacket;                                          // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src5_data;                                                   // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire   [20:0] cmd_demux_001_src5_channel;                                                // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_ready;                                                  // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire          cmd_demux_001_src6_endofpacket;                                            // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                  // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire          cmd_demux_001_src6_startofpacket;                                          // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src6_data;                                                   // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire   [20:0] cmd_demux_001_src6_channel;                                                // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_ready;                                                  // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire          cmd_demux_001_src7_endofpacket;                                            // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                  // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire          cmd_demux_001_src7_startofpacket;                                          // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src7_data;                                                   // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire   [20:0] cmd_demux_001_src7_channel;                                                // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_ready;                                                  // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire          cmd_demux_001_src8_endofpacket;                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                  // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire          cmd_demux_001_src8_startofpacket;                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src8_data;                                                   // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire   [20:0] cmd_demux_001_src8_channel;                                                // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_ready;                                                  // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire          cmd_demux_001_src9_endofpacket;                                            // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                  // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire          cmd_demux_001_src9_startofpacket;                                          // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src9_data;                                                   // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire   [20:0] cmd_demux_001_src9_channel;                                                // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_ready;                                                  // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire          cmd_demux_001_src10_endofpacket;                                           // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                 // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire          cmd_demux_001_src10_startofpacket;                                         // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src10_data;                                                  // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire   [20:0] cmd_demux_001_src10_channel;                                               // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_ready;                                                 // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire          cmd_demux_001_src11_endofpacket;                                           // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                 // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire          cmd_demux_001_src11_startofpacket;                                         // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src11_data;                                                  // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire   [20:0] cmd_demux_001_src11_channel;                                               // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_ready;                                                 // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire          cmd_demux_001_src12_endofpacket;                                           // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                 // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire          cmd_demux_001_src12_startofpacket;                                         // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src12_data;                                                  // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire   [20:0] cmd_demux_001_src12_channel;                                               // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_ready;                                                 // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire          cmd_demux_001_src13_endofpacket;                                           // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                 // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire          cmd_demux_001_src13_startofpacket;                                         // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src13_data;                                                  // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire   [20:0] cmd_demux_001_src13_channel;                                               // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_ready;                                                 // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire          cmd_demux_001_src14_endofpacket;                                           // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                 // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire          cmd_demux_001_src14_startofpacket;                                         // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src14_data;                                                  // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire   [20:0] cmd_demux_001_src14_channel;                                               // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_ready;                                                 // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire          cmd_demux_001_src15_endofpacket;                                           // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                                 // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire          cmd_demux_001_src15_startofpacket;                                         // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src15_data;                                                  // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire   [20:0] cmd_demux_001_src15_channel;                                               // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_ready;                                                 // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire          cmd_demux_001_src16_endofpacket;                                           // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                                 // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire          cmd_demux_001_src16_startofpacket;                                         // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src16_data;                                                  // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire   [20:0] cmd_demux_001_src16_channel;                                               // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_ready;                                                 // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire          cmd_demux_001_src17_endofpacket;                                           // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                                 // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire          cmd_demux_001_src17_startofpacket;                                         // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src17_data;                                                  // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire   [20:0] cmd_demux_001_src17_channel;                                               // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_ready;                                                 // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire          cmd_demux_001_src18_endofpacket;                                           // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                                 // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire          cmd_demux_001_src18_startofpacket;                                         // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src18_data;                                                  // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire   [20:0] cmd_demux_001_src18_channel;                                               // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_ready;                                                 // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire          cmd_demux_001_src19_endofpacket;                                           // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                                 // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire          cmd_demux_001_src19_startofpacket;                                         // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src19_data;                                                  // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire   [20:0] cmd_demux_001_src19_channel;                                               // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_ready;                                                 // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire          cmd_demux_001_src20_endofpacket;                                           // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                                 // cmd_demux_001:src20_valid -> cmd_mux_020:sink1_valid
	wire          cmd_demux_001_src20_startofpacket;                                         // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire  [106:0] cmd_demux_001_src20_data;                                                  // cmd_demux_001:src20_data -> cmd_mux_020:sink1_data
	wire   [20:0] cmd_demux_001_src20_channel;                                               // cmd_demux_001:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src20_ready;                                                 // cmd_mux_020:sink1_ready -> cmd_demux_001:src20_ready
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [106:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [20:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [106:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire   [20:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [106:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [20:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire          rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [106:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire   [20:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire          rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [106:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire   [20:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_002_src1_endofpacket;                                            // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                  // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire          rsp_demux_002_src1_startofpacket;                                          // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [106:0] rsp_demux_002_src1_data;                                                   // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire   [20:0] rsp_demux_002_src1_channel;                                                // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_ready;                                                  // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire          rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [106:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire   [20:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_003_src1_endofpacket;                                            // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                  // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire          rsp_demux_003_src1_startofpacket;                                          // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [106:0] rsp_demux_003_src1_data;                                                   // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire   [20:0] rsp_demux_003_src1_channel;                                                // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_ready;                                                  // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire          rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [106:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire   [20:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_004_src1_endofpacket;                                            // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                  // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire          rsp_demux_004_src1_startofpacket;                                          // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [106:0] rsp_demux_004_src1_data;                                                   // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire   [20:0] rsp_demux_004_src1_channel;                                                // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_ready;                                                  // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire          rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [106:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire   [20:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_005_src1_endofpacket;                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                  // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire          rsp_demux_005_src1_startofpacket;                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [106:0] rsp_demux_005_src1_data;                                                   // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire   [20:0] rsp_demux_005_src1_channel;                                                // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_ready;                                                  // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire          rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire          rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [106:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire   [20:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_ready;                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire          rsp_demux_006_src1_endofpacket;                                            // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                  // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire          rsp_demux_006_src1_startofpacket;                                          // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [106:0] rsp_demux_006_src1_data;                                                   // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire   [20:0] rsp_demux_006_src1_channel;                                                // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_ready;                                                  // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire          rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire          rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire  [106:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire   [20:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_ready;                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire          rsp_demux_007_src1_endofpacket;                                            // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                  // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire          rsp_demux_007_src1_startofpacket;                                          // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [106:0] rsp_demux_007_src1_data;                                                   // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire   [20:0] rsp_demux_007_src1_channel;                                                // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_ready;                                                  // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire          rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire          rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire  [106:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire   [20:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_ready;                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire          rsp_demux_008_src1_endofpacket;                                            // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                  // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire          rsp_demux_008_src1_startofpacket;                                          // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [106:0] rsp_demux_008_src1_data;                                                   // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire   [20:0] rsp_demux_008_src1_channel;                                                // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_ready;                                                  // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire          rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire          rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire  [106:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire   [20:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_ready;                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire          rsp_demux_009_src1_endofpacket;                                            // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                  // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire          rsp_demux_009_src1_startofpacket;                                          // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire  [106:0] rsp_demux_009_src1_data;                                                   // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire   [20:0] rsp_demux_009_src1_channel;                                                // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_ready;                                                  // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire          rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire          rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire  [106:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire   [20:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_ready;                                                  // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire          rsp_demux_010_src1_endofpacket;                                            // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                  // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire          rsp_demux_010_src1_startofpacket;                                          // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire  [106:0] rsp_demux_010_src1_data;                                                   // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire   [20:0] rsp_demux_010_src1_channel;                                                // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_ready;                                                  // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire          rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire          rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire  [106:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire   [20:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_ready;                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire          rsp_demux_011_src1_endofpacket;                                            // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                  // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire          rsp_demux_011_src1_startofpacket;                                          // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire  [106:0] rsp_demux_011_src1_data;                                                   // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire   [20:0] rsp_demux_011_src1_channel;                                                // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_ready;                                                  // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire          rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire          rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire  [106:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire   [20:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_ready;                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire          rsp_demux_012_src1_endofpacket;                                            // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                  // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire          rsp_demux_012_src1_startofpacket;                                          // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire  [106:0] rsp_demux_012_src1_data;                                                   // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire   [20:0] rsp_demux_012_src1_channel;                                                // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_ready;                                                  // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire          rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire          rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire  [106:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire   [20:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_ready;                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire          rsp_demux_013_src1_endofpacket;                                            // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                  // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire          rsp_demux_013_src1_startofpacket;                                          // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire  [106:0] rsp_demux_013_src1_data;                                                   // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire   [20:0] rsp_demux_013_src1_channel;                                                // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_ready;                                                  // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire          rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire          rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire  [106:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire   [20:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_ready;                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire          rsp_demux_014_src1_endofpacket;                                            // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                  // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire          rsp_demux_014_src1_startofpacket;                                          // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire  [106:0] rsp_demux_014_src1_data;                                                   // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire   [20:0] rsp_demux_014_src1_channel;                                                // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_ready;                                                  // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire          rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire          rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire  [106:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire   [20:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_ready;                                                  // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire          rsp_demux_015_src1_endofpacket;                                            // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                  // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire          rsp_demux_015_src1_startofpacket;                                          // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire  [106:0] rsp_demux_015_src1_data;                                                   // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire   [20:0] rsp_demux_015_src1_channel;                                                // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_ready;                                                  // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire          rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire          rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire  [106:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire   [20:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_ready;                                                  // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire          rsp_demux_016_src1_endofpacket;                                            // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                  // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire          rsp_demux_016_src1_startofpacket;                                          // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire  [106:0] rsp_demux_016_src1_data;                                                   // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire   [20:0] rsp_demux_016_src1_channel;                                                // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_ready;                                                  // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire          rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire          rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire  [106:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire   [20:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_ready;                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire          rsp_demux_017_src1_endofpacket;                                            // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                  // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire          rsp_demux_017_src1_startofpacket;                                          // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire  [106:0] rsp_demux_017_src1_data;                                                   // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire   [20:0] rsp_demux_017_src1_channel;                                                // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_ready;                                                  // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire          rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire          rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire  [106:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire   [20:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_ready;                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire          rsp_demux_018_src1_endofpacket;                                            // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                  // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire          rsp_demux_018_src1_startofpacket;                                          // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire  [106:0] rsp_demux_018_src1_data;                                                   // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire   [20:0] rsp_demux_018_src1_channel;                                                // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_ready;                                                  // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire          rsp_demux_019_src0_endofpacket;                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src0_valid;                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire          rsp_demux_019_src0_startofpacket;                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire  [106:0] rsp_demux_019_src0_data;                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire   [20:0] rsp_demux_019_src0_channel;                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_ready;                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire          rsp_demux_019_src1_endofpacket;                                            // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                  // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire          rsp_demux_019_src1_startofpacket;                                          // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire  [106:0] rsp_demux_019_src1_data;                                                   // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire   [20:0] rsp_demux_019_src1_channel;                                                // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_ready;                                                  // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire          rsp_demux_020_src0_endofpacket;                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src0_valid;                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire          rsp_demux_020_src0_startofpacket;                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire  [106:0] rsp_demux_020_src0_data;                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire   [20:0] rsp_demux_020_src0_channel;                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_ready;                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire          rsp_demux_020_src1_endofpacket;                                            // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                  // rsp_demux_020:src1_valid -> rsp_mux_001:sink20_valid
	wire          rsp_demux_020_src1_startofpacket;                                          // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire  [106:0] rsp_demux_020_src1_data;                                                   // rsp_demux_020:src1_data -> rsp_mux_001:sink20_data
	wire   [20:0] rsp_demux_020_src1_channel;                                                // rsp_demux_020:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src1_ready;                                                  // rsp_mux_001:sink20_ready -> rsp_demux_020:src1_ready
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire   [88:0] router_003_src_data;                                                       // router_003:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire   [20:0] router_003_src_channel;                                                    // router_003:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_003_src_ready;                                                      // sdram_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                      // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                              // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [106:0] sdram_s1_rsp_width_adapter_src_data;                                       // sdram_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                      // rsp_demux_001:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire   [20:0] sdram_s1_rsp_width_adapter_src_channel;                                    // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire  [106:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire   [20:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_ready;                                                     // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                      // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                              // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire   [88:0] sdram_s1_cmd_width_adapter_src_data;                                       // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                      // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire   [20:0] sdram_s1_cmd_width_adapter_src_channel;                                    // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire   [20:0] cpu_instruction_master_limiter_cmd_valid_data;                             // CPU_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [20:0] cpu_data_master_limiter_cmd_valid_data;                                    // CPU_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                      (clk_clk_clk),                                                               //                       clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (CPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (CPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (CPU_instruction_master_read),                                               //                          .read
		.av_readdata              (CPU_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (CPU_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_write                 (1'b0),                                                                      //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                      (clk_clk_clk),                                                        //                       clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (CPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (CPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (CPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (CPU_data_master_read),                                               //                          .read
		.av_readdata              (CPU_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (CPU_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (CPU_data_master_write),                                              //                          .write
		.av_writedata             (CPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (CPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                      (clk_clk_clk),                                  //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (CPU_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (CPU_jtag_debug_module_write),                  //                         .write
		.av_read                  (CPU_jtag_debug_module_read),                   //                         .read
		.av_readdata              (CPU_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (CPU_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (CPU_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (CPU_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (CPU_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write                (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                          //                         .write
		.av_read                  (sdram_s1_read),                           //                         .read
		.av_readdata              (sdram_s1_readdata),                       //                         .readdata
		.av_writedata             (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pio_led_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (pio_led_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (pio_led_s1_agent_m0_read),                //                         .read
		.uav_write                (pio_led_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (pio_led_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (pio_led_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (pio_led_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (pio_led_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (pio_led_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (pio_led_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (pio_led_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (pio_led_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (pio_led_s1_write),                        //                         .write
		.av_readdata              (pio_led_s1_readdata),                     //                         .readdata
		.av_writedata             (pio_led_s1_writedata),                    //                         .writedata
		.av_chipselect            (pio_led_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                      (clk_clk_clk),                                     //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write                (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata              (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write                 (),                                                //              (terminated)
		.av_read                  (),                                                //              (terminated)
		.av_writedata             (),                                                //              (terminated)
		.av_begintransfer         (),                                                //              (terminated)
		.av_beginbursttransfer    (),                                                //              (terminated)
		.av_burstcount            (),                                                //              (terminated)
		.av_byteenable            (),                                                //              (terminated)
		.av_readdatavalid         (1'b0),                                            //              (terminated)
		.av_waitrequest           (1'b0),                                            //              (terminated)
		.av_writebyteenable       (),                                                //              (terminated)
		.av_lock                  (),                                                //              (terminated)
		.av_chipselect            (),                                                //              (terminated)
		.av_clken                 (),                                                //              (terminated)
		.uav_clken                (1'b0),                                            //              (terminated)
		.av_debugaccess           (),                                                //              (terminated)
		.av_outputenable          (),                                                //              (terminated)
		.uav_response             (),                                                //              (terminated)
		.av_response              (2'b00),                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                //              (terminated)
		.av_writeresponserequest  (),                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (onchip_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory_s1_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory_s1_write),                  //                         .write
		.av_readdata              (onchip_memory_s1_readdata),               //                         .readdata
		.av_writedata             (onchip_memory_s1_writedata),              //                         .writedata
		.av_byteenable            (onchip_memory_s1_byteenable),             //                         .byteenable
		.av_chipselect            (onchip_memory_s1_chipselect),             //                         .chipselect
		.av_clken                 (onchip_memory_s1_clken),                  //                         .clken
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_data_out_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_data_out_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_data_out_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (lcd_data_out_s1_agent_m0_read),           //                         .read
		.uav_write                (lcd_data_out_s1_agent_m0_write),          //                         .write
		.uav_waitrequest          (lcd_data_out_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (lcd_data_out_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (lcd_data_out_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (lcd_data_out_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (lcd_data_out_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (lcd_data_out_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (lcd_data_out_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address               (LCD_DATA_OUT_s1_address),                 //      avalon_anti_slave_0.address
		.av_write                 (LCD_DATA_OUT_s1_write),                   //                         .write
		.av_readdata              (LCD_DATA_OUT_s1_readdata),                //                         .readdata
		.av_writedata             (LCD_DATA_OUT_s1_writedata),               //                         .writedata
		.av_chipselect            (LCD_DATA_OUT_s1_chipselect),              //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_rs_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_rs_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_rs_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (lcd_rs_s1_agent_m0_read),                 //                         .read
		.uav_write                (lcd_rs_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (lcd_rs_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (lcd_rs_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (lcd_rs_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (lcd_rs_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (lcd_rs_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (lcd_rs_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (lcd_rs_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (LCD_RS_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (LCD_RS_s1_write),                         //                         .write
		.av_readdata              (LCD_RS_s1_readdata),                      //                         .readdata
		.av_writedata             (LCD_RS_s1_writedata),                     //                         .writedata
		.av_chipselect            (LCD_RS_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_wr_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_wr_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_wr_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (lcd_wr_s1_agent_m0_read),                 //                         .read
		.uav_write                (lcd_wr_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (lcd_wr_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (lcd_wr_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (lcd_wr_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (lcd_wr_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (lcd_wr_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (lcd_wr_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (lcd_wr_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (LCD_WR_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (LCD_WR_s1_write),                         //                         .write
		.av_readdata              (LCD_WR_s1_readdata),                      //                         .readdata
		.av_writedata             (LCD_WR_s1_writedata),                     //                         .writedata
		.av_chipselect            (LCD_WR_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_cs_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_cs_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_cs_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (lcd_cs_s1_agent_m0_read),                 //                         .read
		.uav_write                (lcd_cs_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (lcd_cs_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (lcd_cs_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (lcd_cs_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (lcd_cs_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (lcd_cs_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (lcd_cs_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (lcd_cs_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (LCD_CS_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (LCD_CS_s1_write),                         //                         .write
		.av_readdata              (LCD_CS_s1_readdata),                      //                         .readdata
		.av_writedata             (LCD_CS_s1_writedata),                     //                         .writedata
		.av_chipselect            (LCD_CS_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_reset_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_reset_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_reset_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read                 (lcd_reset_s1_agent_m0_read),              //                         .read
		.uav_write                (lcd_reset_s1_agent_m0_write),             //                         .write
		.uav_waitrequest          (lcd_reset_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid        (lcd_reset_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable           (lcd_reset_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata             (lcd_reset_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata            (lcd_reset_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock                 (lcd_reset_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess          (lcd_reset_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address               (LCD_RESET_s1_address),                    //      avalon_anti_slave_0.address
		.av_write                 (LCD_RESET_s1_write),                      //                         .write
		.av_readdata              (LCD_RESET_s1_readdata),                   //                         .readdata
		.av_writedata             (LCD_RESET_s1_writedata),                  //                         .writedata
		.av_chipselect            (LCD_RESET_s1_chipselect),                 //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sda_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sda_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (sda_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (sda_s1_agent_m0_read),                    //                         .read
		.uav_write                (sda_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (sda_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (sda_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (sda_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (sda_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (sda_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (sda_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (sda_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (SDA_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (SDA_s1_write),                            //                         .write
		.av_readdata              (SDA_s1_readdata),                         //                         .readdata
		.av_writedata             (SDA_s1_writedata),                        //                         .writedata
		.av_chipselect            (SDA_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sm_1clr_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sm_1clr_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (sm_1clr_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (sm_1clr_s1_agent_m0_read),                //                         .read
		.uav_write                (sm_1clr_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (sm_1clr_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (sm_1clr_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (sm_1clr_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (sm_1clr_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (sm_1clr_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (sm_1clr_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (sm_1clr_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (SM_1clr_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (SM_1clr_s1_write),                        //                         .write
		.av_readdata              (SM_1clr_s1_readdata),                     //                         .readdata
		.av_writedata             (SM_1clr_s1_writedata),                    //                         .writedata
		.av_chipselect            (SM_1clr_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sm_1ena_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sm_1ena_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (sm_1ena_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (sm_1ena_s1_agent_m0_read),                //                         .read
		.uav_write                (sm_1ena_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (sm_1ena_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (sm_1ena_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (sm_1ena_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (sm_1ena_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (sm_1ena_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (sm_1ena_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (sm_1ena_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (SM_1ena_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (SM_1ena_s1_write),                        //                         .write
		.av_readdata              (SM_1ena_s1_readdata),                     //                         .readdata
		.av_writedata             (SM_1ena_s1_writedata),                    //                         .writedata
		.av_chipselect            (SM_1ena_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sm_mux_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sm_mux_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (sm_mux_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (sm_mux_s1_agent_m0_read),                 //                         .read
		.uav_write                (sm_mux_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (sm_mux_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (sm_mux_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (sm_mux_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (sm_mux_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (sm_mux_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (sm_mux_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (sm_mux_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (SM_mux_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (SM_mux_s1_write),                         //                         .write
		.av_readdata              (SM_mux_s1_readdata),                      //                         .readdata
		.av_writedata             (SM_mux_s1_writedata),                     //                         .writedata
		.av_chipselect            (SM_mux_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sm_data_in_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sm_data_in_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (sm_data_in_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (sm_data_in_s1_agent_m0_read),             //                         .read
		.uav_write                (sm_data_in_s1_agent_m0_write),            //                         .write
		.uav_waitrequest          (sm_data_in_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (sm_data_in_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (sm_data_in_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (sm_data_in_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (sm_data_in_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (sm_data_in_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (sm_data_in_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (SM_data_in_s1_address),                   //      avalon_anti_slave_0.address
		.av_readdata              (SM_data_in_s1_readdata),                  //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_rd_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (lcd_rd_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (lcd_rd_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (lcd_rd_s1_agent_m0_read),                 //                         .read
		.uav_write                (lcd_rd_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (lcd_rd_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (lcd_rd_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (lcd_rd_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (lcd_rd_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (lcd_rd_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (lcd_rd_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (lcd_rd_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (LCD_RD_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (LCD_RD_s1_write),                         //                         .write
		.av_readdata              (LCD_RD_s1_readdata),                      //                         .readdata
		.av_writedata             (LCD_RD_s1_writedata),                     //                         .writedata
		.av_chipselect            (LCD_RD_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vs_int_in_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (vs_int_in_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount           (vs_int_in_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read                 (vs_int_in_s1_agent_m0_read),              //                         .read
		.uav_write                (vs_int_in_s1_agent_m0_write),             //                         .write
		.uav_waitrequest          (vs_int_in_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid        (vs_int_in_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable           (vs_int_in_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata             (vs_int_in_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata            (vs_int_in_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock                 (vs_int_in_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess          (vs_int_in_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address               (VS_int_in_s1_address),                    //      avalon_anti_slave_0.address
		.av_write                 (VS_int_in_s1_write),                      //                         .write
		.av_readdata              (VS_int_in_s1_readdata),                   //                         .readdata
		.av_writedata             (VS_int_in_s1_writedata),                  //                         .writedata
		.av_chipselect            (VS_int_in_s1_chipselect),                 //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_control_slave_translator (
		.clk                      (clk_clk_clk),                                              //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address              (performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write                (performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (performance_counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (performance_counter_control_slave_write),                  //                         .write
		.av_readdata              (performance_counter_control_slave_readdata),               //                         .readdata
		.av_writedata             (performance_counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer         (performance_counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                  (),                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                         //              (terminated)
		.av_burstcount            (),                                                         //              (terminated)
		.av_byteenable            (),                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                     //              (terminated)
		.av_writebyteenable       (),                                                         //              (terminated)
		.av_lock                  (),                                                         //              (terminated)
		.av_chipselect            (),                                                         //              (terminated)
		.av_clken                 (),                                                         //              (terminated)
		.uav_clken                (1'b0),                                                     //              (terminated)
		.av_debugaccess           (),                                                         //              (terminated)
		.av_outputenable          (),                                                         //              (terminated)
		.uav_response             (),                                                         //              (terminated)
		.av_response              (2'b00),                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                         //              (terminated)
		.av_writeresponserequest  (),                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sm_2strobe_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sm_2strobe_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (sm_2strobe_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (sm_2strobe_s1_agent_m0_read),             //                         .read
		.uav_write                (sm_2strobe_s1_agent_m0_write),            //                         .write
		.uav_waitrequest          (sm_2strobe_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (sm_2strobe_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (sm_2strobe_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (sm_2strobe_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (sm_2strobe_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (sm_2strobe_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (sm_2strobe_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (SM_2strobe_s1_address),                   //      avalon_anti_slave_0.address
		.av_write                 (SM_2strobe_s1_write),                     //                         .write
		.av_readdata              (SM_2strobe_s1_readdata),                  //                         .readdata
		.av_writedata             (SM_2strobe_s1_writedata),                 //                         .writedata
		.av_chipselect            (SM_2strobe_s1_chipselect),                //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) scl_s1_translator (
		.clk                      (clk_clk_clk),                             //                      clk.clk
		.reset                    (CPU_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (scl_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (scl_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (scl_s1_agent_m0_read),                    //                         .read
		.uav_write                (scl_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest          (scl_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (scl_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (scl_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (scl_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (scl_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (scl_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (scl_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (SCL_s1_address),                          //      avalon_anti_slave_0.address
		.av_write                 (SCL_s1_write),                            //                         .write
		.av_readdata              (SCL_s1_readdata),                         //                         .readdata
		.av_writedata             (SCL_s1_writedata),                        //                         .writedata
		.av_chipselect            (SCL_s1_chipselect),                       //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BEGIN_BURST           (82),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_BURST_TYPE_H          (79),
		.PKT_BURST_TYPE_L          (78),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_DATA_SIDEBAND_H       (81),
		.PKT_DATA_SIDEBAND_L       (81),
		.PKT_QOS_H                 (83),
		.PKT_QOS_L                 (83),
		.PKT_ADDR_SIDEBAND_H       (80),
		.PKT_ADDR_SIDEBAND_L       (80),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                     (clk_clk_clk),                                                               //       clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BEGIN_BURST           (82),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_BURST_TYPE_H          (79),
		.PKT_BURST_TYPE_L          (78),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_DATA_SIDEBAND_H       (81),
		.PKT_DATA_SIDEBAND_L       (81),
		.PKT_QOS_H                 (83),
		.PKT_QOS_L                 (83),
		.PKT_ADDR_SIDEBAND_H       (80),
		.PKT_ADDR_SIDEBAND_L       (80),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                     (clk_clk_clk),                                                        //       clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_clk_clk),                                            //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                            //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (64),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_TRANS_LOCK            (49),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (71),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_ORI_BURST_SIZE_H      (88),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (sdram_s1_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (sdram_s1_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                               //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_clk_clk),                             //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_led_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pio_led_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_led_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_led_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_led_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_led_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_led_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_led_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_led_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_led_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_led_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_led_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_led_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_led_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_led_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_led_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_led_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_003_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                     //                .channel
		.rf_sink_ready           (pio_led_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_led_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_led_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_led_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_led_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_led_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_led_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_led_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_led_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_led_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_led_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_led_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_led_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_led_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pio_led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_clk_clk),                                               //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                               //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_clk_clk),                                       //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_005_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                       //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_data_out_s1_agent (
		.clk                     (clk_clk_clk),                                      //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (lcd_data_out_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_data_out_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_data_out_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_data_out_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_data_out_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_data_out_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_data_out_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_data_out_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_data_out_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_data_out_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_data_out_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_data_out_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_data_out_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_data_out_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_data_out_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_data_out_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_006_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                          //                .channel
		.rf_sink_ready           (lcd_data_out_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_data_out_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_data_out_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_data_out_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_data_out_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_data_out_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_data_out_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_data_out_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_data_out_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_data_out_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_data_out_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_data_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_data_out_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_data_out_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_data_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_data_out_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_data_out_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                      //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (lcd_data_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_data_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_data_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_data_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_data_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_data_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_data_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_data_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_data_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_data_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_rs_s1_agent (
		.clk                     (clk_clk_clk),                                //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lcd_rs_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_rs_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_rs_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_rs_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_rs_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_rs_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_rs_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_rs_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_rs_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_rs_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_rs_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_rs_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_rs_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_rs_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_rs_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_rs_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_007_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                    //                .channel
		.rf_sink_ready           (lcd_rs_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_rs_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_rs_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_rs_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_rs_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_rs_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_rs_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_rs_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_rs_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_rs_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_rs_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_rs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_rs_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_rs_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_rs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_rs_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_rs_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (lcd_rs_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_rs_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_rs_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_rs_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_rs_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_rs_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_rs_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_rs_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_rs_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_rs_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_wr_s1_agent (
		.clk                     (clk_clk_clk),                                //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lcd_wr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_wr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_wr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_wr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_wr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_wr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_wr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_wr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_wr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_wr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_wr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_wr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_wr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_wr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_wr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_wr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_008_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                    //                .channel
		.rf_sink_ready           (lcd_wr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_wr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_wr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_wr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_wr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_wr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_wr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_wr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_wr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_wr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_wr_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_wr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_wr_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_wr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_wr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_wr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_wr_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (lcd_wr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_wr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_wr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_wr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_wr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_wr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_wr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_wr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_wr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_wr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_cs_s1_agent (
		.clk                     (clk_clk_clk),                                //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lcd_cs_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_cs_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_cs_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_cs_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_cs_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_cs_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_cs_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_cs_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_cs_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_cs_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_cs_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_cs_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_cs_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_cs_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_cs_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_cs_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_009_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                    //                .channel
		.rf_sink_ready           (lcd_cs_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_cs_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_cs_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_cs_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_cs_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_cs_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_cs_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_cs_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_cs_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_cs_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_cs_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_cs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_cs_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_cs_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_cs_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_cs_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_cs_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (lcd_cs_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_cs_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_cs_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_cs_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_cs_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_cs_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_cs_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_cs_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_cs_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_cs_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_reset_s1_agent (
		.clk                     (clk_clk_clk),                                   //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (lcd_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                       //                .channel
		.rf_sink_ready           (lcd_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_reset_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_reset_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                   //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (lcd_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sda_s1_agent (
		.clk                     (clk_clk_clk),                             //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sda_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sda_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sda_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sda_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sda_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sda_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sda_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sda_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sda_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sda_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sda_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sda_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sda_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sda_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sda_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sda_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_011_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                 //                .channel
		.rf_sink_ready           (sda_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sda_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sda_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sda_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sda_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sda_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sda_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sda_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sda_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sda_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sda_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sda_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sda_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sda_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sda_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sda_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponserequest (),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sda_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                             //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sda_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sda_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sda_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sda_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sda_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sda_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sda_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sda_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sda_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sda_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sm_1clr_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sm_1clr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sm_1clr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sm_1clr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sm_1clr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sm_1clr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sm_1clr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sm_1clr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sm_1clr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sm_1clr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sm_1clr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sm_1clr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sm_1clr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sm_1clr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sm_1clr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sm_1clr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sm_1clr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_012_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                     //                .channel
		.rf_sink_ready           (sm_1clr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sm_1clr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sm_1clr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sm_1clr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sm_1clr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sm_1clr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sm_1clr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sm_1clr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sm_1clr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sm_1clr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sm_1clr_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sm_1clr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sm_1clr_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sm_1clr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sm_1clr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sm_1clr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sm_1clr_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sm_1clr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sm_1clr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sm_1clr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sm_1clr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sm_1clr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sm_1clr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sm_1clr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sm_1clr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sm_1clr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sm_1clr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sm_1ena_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sm_1ena_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sm_1ena_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sm_1ena_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sm_1ena_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sm_1ena_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sm_1ena_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sm_1ena_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sm_1ena_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sm_1ena_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sm_1ena_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sm_1ena_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sm_1ena_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sm_1ena_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sm_1ena_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sm_1ena_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sm_1ena_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_013_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                     //                .channel
		.rf_sink_ready           (sm_1ena_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sm_1ena_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sm_1ena_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sm_1ena_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sm_1ena_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sm_1ena_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sm_1ena_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sm_1ena_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sm_1ena_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sm_1ena_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sm_1ena_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sm_1ena_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sm_1ena_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sm_1ena_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sm_1ena_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sm_1ena_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sm_1ena_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sm_1ena_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sm_1ena_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sm_1ena_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sm_1ena_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sm_1ena_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sm_1ena_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sm_1ena_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sm_1ena_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sm_1ena_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sm_1ena_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sm_mux_s1_agent (
		.clk                     (clk_clk_clk),                                //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sm_mux_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sm_mux_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sm_mux_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sm_mux_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sm_mux_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sm_mux_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sm_mux_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sm_mux_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sm_mux_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sm_mux_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sm_mux_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sm_mux_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sm_mux_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sm_mux_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sm_mux_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sm_mux_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_014_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                    //                .channel
		.rf_sink_ready           (sm_mux_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sm_mux_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sm_mux_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sm_mux_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sm_mux_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sm_mux_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sm_mux_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sm_mux_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sm_mux_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sm_mux_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sm_mux_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sm_mux_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sm_mux_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sm_mux_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sm_mux_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sm_mux_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sm_mux_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sm_mux_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sm_mux_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sm_mux_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sm_mux_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sm_mux_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sm_mux_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sm_mux_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sm_mux_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sm_mux_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sm_mux_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sm_data_in_s1_agent (
		.clk                     (clk_clk_clk),                                    //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sm_data_in_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sm_data_in_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sm_data_in_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sm_data_in_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sm_data_in_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sm_data_in_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sm_data_in_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sm_data_in_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sm_data_in_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sm_data_in_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sm_data_in_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sm_data_in_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sm_data_in_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sm_data_in_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sm_data_in_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sm_data_in_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_015_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                        //                .channel
		.rf_sink_ready           (sm_data_in_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sm_data_in_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sm_data_in_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sm_data_in_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sm_data_in_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sm_data_in_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sm_data_in_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sm_data_in_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sm_data_in_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sm_data_in_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sm_data_in_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sm_data_in_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sm_data_in_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sm_data_in_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sm_data_in_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sm_data_in_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sm_data_in_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                    //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sm_data_in_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sm_data_in_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sm_data_in_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sm_data_in_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sm_data_in_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sm_data_in_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sm_data_in_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sm_data_in_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sm_data_in_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sm_data_in_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_rd_s1_agent (
		.clk                     (clk_clk_clk),                                //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (lcd_rd_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_rd_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_rd_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_rd_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_rd_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_rd_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_rd_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_rd_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_rd_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_rd_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_rd_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_rd_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_rd_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_rd_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_rd_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_rd_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_016_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                    //                .channel
		.rf_sink_ready           (lcd_rd_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_rd_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_rd_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_rd_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_rd_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_rd_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_rd_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_rd_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_rd_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_rd_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_rd_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_rd_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_rd_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_rd_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_rd_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_rd_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponserequest (),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_rd_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (lcd_rd_s1_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_rd_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_rd_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_rd_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_rd_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_rd_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_rd_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_rd_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_rd_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_rd_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vs_int_in_s1_agent (
		.clk                     (clk_clk_clk),                                   //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (vs_int_in_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vs_int_in_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vs_int_in_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vs_int_in_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vs_int_in_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (vs_int_in_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vs_int_in_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vs_int_in_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (vs_int_in_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vs_int_in_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (vs_int_in_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (vs_int_in_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vs_int_in_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (vs_int_in_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (vs_int_in_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (vs_int_in_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_017_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                       //                .channel
		.rf_sink_ready           (vs_int_in_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vs_int_in_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vs_int_in_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vs_int_in_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vs_int_in_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vs_int_in_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vs_int_in_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vs_int_in_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vs_int_in_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vs_int_in_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vs_int_in_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vs_int_in_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (vs_int_in_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (vs_int_in_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vs_int_in_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vs_int_in_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vs_int_in_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                   //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (vs_int_in_s1_agent_rf_source_data),             //        in.data
		.in_valid          (vs_int_in_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (vs_int_in_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vs_int_in_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vs_int_in_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vs_int_in_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vs_int_in_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vs_int_in_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vs_int_in_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vs_int_in_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) performance_counter_control_slave_agent (
		.clk                     (clk_clk_clk),                                                        //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                            //                .channel
		.rf_sink_ready           (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (performance_counter_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_control_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                        //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sm_2strobe_s1_agent (
		.clk                     (clk_clk_clk),                                    //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sm_2strobe_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sm_2strobe_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sm_2strobe_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sm_2strobe_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sm_2strobe_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sm_2strobe_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sm_2strobe_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sm_2strobe_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sm_2strobe_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sm_2strobe_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sm_2strobe_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sm_2strobe_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sm_2strobe_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sm_2strobe_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sm_2strobe_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sm_2strobe_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_019_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                        //                .channel
		.rf_sink_ready           (sm_2strobe_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sm_2strobe_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sm_2strobe_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sm_2strobe_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sm_2strobe_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sm_2strobe_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sm_2strobe_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sm_2strobe_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sm_2strobe_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sm_2strobe_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sm_2strobe_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sm_2strobe_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sm_2strobe_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sm_2strobe_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sm_2strobe_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sm_2strobe_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sm_2strobe_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                    //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sm_2strobe_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sm_2strobe_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sm_2strobe_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sm_2strobe_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sm_2strobe_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sm_2strobe_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sm_2strobe_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sm_2strobe_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sm_2strobe_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sm_2strobe_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (82),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_TRANS_LOCK            (67),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_ORI_BURST_SIZE_H      (106),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) scl_s1_agent (
		.clk                     (clk_clk_clk),                             //             clk.clk
		.reset                   (CPU_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (scl_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (scl_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (scl_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (scl_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (scl_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (scl_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (scl_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (scl_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (scl_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (scl_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (scl_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (scl_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (scl_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (scl_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (scl_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (scl_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_020_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                 //                .channel
		.rf_sink_ready           (scl_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (scl_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (scl_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (scl_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (scl_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (scl_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (scl_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (scl_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (scl_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (scl_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (scl_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (scl_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (scl_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (scl_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (scl_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (scl_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponserequest (),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) scl_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                             //       clk.clk
		.reset             (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (scl_s1_agent_rf_source_data),             //        in.data
		.in_valid          (scl_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (scl_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (scl_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (scl_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (scl_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (scl_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (scl_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (scl_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (scl_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	SM_MCU_mm_interconnect_0_router router (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                   //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                    //       src.ready
		.src_valid          (router_003_src_valid),                    //          .valid
		.src_data           (router_003_src_data),                     //          .data
		.src_channel        (router_003_src_channel),                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (pio_led_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (pio_led_s1_agent_rp_valid),               //          .valid
		.sink_data          (pio_led_s1_agent_rp_data),                //          .data
		.sink_startofpacket (pio_led_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pio_led_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                     //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                    //       src.ready
		.src_valid          (router_007_src_valid),                    //          .valid
		.src_data           (router_007_src_data),                     //          .data
		.src_channel        (router_007_src_channel),                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (lcd_data_out_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (lcd_data_out_s1_agent_rp_valid),          //          .valid
		.sink_data          (lcd_data_out_s1_agent_rp_data),           //          .data
		.sink_startofpacket (lcd_data_out_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (lcd_data_out_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                    //       src.ready
		.src_valid          (router_008_src_valid),                    //          .valid
		.src_data           (router_008_src_data),                     //          .data
		.src_channel        (router_008_src_channel),                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (lcd_rs_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (lcd_rs_s1_agent_rp_valid),                //          .valid
		.sink_data          (lcd_rs_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (lcd_rs_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (lcd_rs_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (lcd_wr_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (lcd_wr_s1_agent_rp_valid),                //          .valid
		.sink_data          (lcd_wr_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (lcd_wr_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (lcd_wr_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                    //       src.ready
		.src_valid          (router_010_src_valid),                    //          .valid
		.src_data           (router_010_src_data),                     //          .data
		.src_channel        (router_010_src_channel),                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (lcd_cs_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (lcd_cs_s1_agent_rp_valid),                //          .valid
		.sink_data          (lcd_cs_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (lcd_cs_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (lcd_cs_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                    //       src.ready
		.src_valid          (router_011_src_valid),                    //          .valid
		.src_data           (router_011_src_data),                     //          .data
		.src_channel        (router_011_src_channel),                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (lcd_reset_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (lcd_reset_s1_agent_rp_valid),             //          .valid
		.sink_data          (lcd_reset_s1_agent_rp_data),              //          .data
		.sink_startofpacket (lcd_reset_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (lcd_reset_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                    //       src.ready
		.src_valid          (router_012_src_valid),                    //          .valid
		.src_data           (router_012_src_data),                     //          .data
		.src_channel        (router_012_src_channel),                  //          .channel
		.src_startofpacket  (router_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (sda_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sda_s1_agent_rp_valid),                   //          .valid
		.sink_data          (sda_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (sda_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sda_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                    //       src.ready
		.src_valid          (router_013_src_valid),                    //          .valid
		.src_data           (router_013_src_data),                     //          .data
		.src_channel        (router_013_src_channel),                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (sm_1clr_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (sm_1clr_s1_agent_rp_valid),               //          .valid
		.sink_data          (sm_1clr_s1_agent_rp_data),                //          .data
		.sink_startofpacket (sm_1clr_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sm_1clr_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                    //       src.ready
		.src_valid          (router_014_src_valid),                    //          .valid
		.src_data           (router_014_src_data),                     //          .data
		.src_channel        (router_014_src_channel),                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (sm_1ena_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (sm_1ena_s1_agent_rp_valid),               //          .valid
		.sink_data          (sm_1ena_s1_agent_rp_data),                //          .data
		.sink_startofpacket (sm_1ena_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sm_1ena_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (sm_mux_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (sm_mux_s1_agent_rp_valid),                //          .valid
		.sink_data          (sm_mux_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (sm_mux_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sm_mux_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (sm_data_in_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (sm_data_in_s1_agent_rp_valid),            //          .valid
		.sink_data          (sm_data_in_s1_agent_rp_data),             //          .data
		.sink_startofpacket (sm_data_in_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sm_data_in_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (lcd_rd_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (lcd_rd_s1_agent_rp_valid),                //          .valid
		.sink_data          (lcd_rd_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (lcd_rd_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (lcd_rd_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                    //       src.ready
		.src_valid          (router_018_src_valid),                    //          .valid
		.src_data           (router_018_src_data),                     //          .data
		.src_channel        (router_018_src_channel),                  //          .channel
		.src_startofpacket  (router_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (vs_int_in_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (vs_int_in_s1_agent_rp_valid),             //          .valid
		.sink_data          (vs_int_in_s1_agent_rp_data),              //          .data
		.sink_startofpacket (vs_int_in_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (vs_int_in_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                    //       src.ready
		.src_valid          (router_019_src_valid),                    //          .valid
		.src_data           (router_019_src_data),                     //          .data
		.src_channel        (router_019_src_channel),                  //          .channel
		.src_startofpacket  (router_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                              //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_020_src_ready),                                     //       src.ready
		.src_valid          (router_020_src_valid),                                     //          .valid
		.src_data           (router_020_src_data),                                      //          .data
		.src_channel        (router_020_src_channel),                                   //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (sm_2strobe_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (sm_2strobe_s1_agent_rp_valid),            //          .valid
		.sink_data          (sm_2strobe_s1_agent_rp_data),             //          .data
		.sink_startofpacket (sm_2strobe_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sm_2strobe_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                    //       src.ready
		.src_valid          (router_021_src_valid),                    //          .valid
		.src_data           (router_021_src_data),                     //          .data
		.src_channel        (router_021_src_channel),                  //          .channel
		.src_startofpacket  (router_021_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (scl_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (scl_s1_agent_rp_valid),                   //          .valid
		.sink_data          (scl_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (scl_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (scl_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                    //       src.ready
		.src_valid          (router_022_src_valid),                    //          .valid
		.src_data           (router_022_src_data),                     //          .data
		.src_channel        (router_022_src_channel),                  //          .channel
		.src_startofpacket  (router_022_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clk_clk_clk),                                          //       clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (84),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (21),
		.VALID_WIDTH               (21),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (clk_clk_clk),                                   //       clk.clk
		.reset                  (CPU_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                          //          .valid
		.cmd_sink_data          (router_001_src_data),                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (54),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (21),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_clk_clk),                                  //       cr0.clk
		.reset                 (CPU_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	SM_MCU_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_clk_clk),                                          //        clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                          //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                //           .valid
		.src16_data          (cmd_demux_src16_data),                                 //           .data
		.src16_channel       (cmd_demux_src16_channel),                              //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                          //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                //           .valid
		.src17_data          (cmd_demux_src17_data),                                 //           .data
		.src17_channel       (cmd_demux_src17_channel),                              //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                          //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                //           .valid
		.src18_data          (cmd_demux_src18_data),                                 //           .data
		.src18_channel       (cmd_demux_src18_channel),                              //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                          //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                //           .valid
		.src19_data          (cmd_demux_src19_data),                                 //           .data
		.src19_channel       (cmd_demux_src19_channel),                              //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                        //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                          //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                //           .valid
		.src20_data          (cmd_demux_src20_data),                                 //           .data
		.src20_channel       (cmd_demux_src20_channel),                              //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                        //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket)                           //           .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (clk_clk_clk),                                   //        clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready          (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                      //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                      //           .valid
		.src0_data           (cmd_demux_001_src0_data),                       //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                    //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                      //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                      //           .valid
		.src1_data           (cmd_demux_001_src1_data),                       //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                    //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                      //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                      //           .valid
		.src2_data           (cmd_demux_001_src2_data),                       //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                    //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                      //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                      //           .valid
		.src3_data           (cmd_demux_001_src3_data),                       //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                    //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                      //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                      //           .valid
		.src4_data           (cmd_demux_001_src4_data),                       //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                    //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                      //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                      //           .valid
		.src5_data           (cmd_demux_001_src5_data),                       //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                    //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),              //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                      //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                      //           .valid
		.src6_data           (cmd_demux_001_src6_data),                       //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                    //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),              //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                      //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                      //           .valid
		.src7_data           (cmd_demux_001_src7_data),                       //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                    //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),              //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                      //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                      //           .valid
		.src8_data           (cmd_demux_001_src8_data),                       //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                    //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),              //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                      //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                      //           .valid
		.src9_data           (cmd_demux_001_src9_data),                       //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                    //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),              //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                     //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                     //           .valid
		.src10_data          (cmd_demux_001_src10_data),                      //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                   //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),             //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),               //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                     //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                     //           .valid
		.src11_data          (cmd_demux_001_src11_data),                      //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                   //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),             //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),               //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                     //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                     //           .valid
		.src12_data          (cmd_demux_001_src12_data),                      //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                   //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),             //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),               //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                     //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                     //           .valid
		.src13_data          (cmd_demux_001_src13_data),                      //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                   //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),             //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),               //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                     //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                     //           .valid
		.src14_data          (cmd_demux_001_src14_data),                      //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                   //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),             //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),               //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                     //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                     //           .valid
		.src15_data          (cmd_demux_001_src15_data),                      //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                   //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),             //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),               //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                     //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                     //           .valid
		.src16_data          (cmd_demux_001_src16_data),                      //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                   //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),             //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),               //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                     //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                     //           .valid
		.src17_data          (cmd_demux_001_src17_data),                      //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                   //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),             //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),               //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                     //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                     //           .valid
		.src18_data          (cmd_demux_001_src18_data),                      //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                   //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),             //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),               //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                     //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                     //           .valid
		.src19_data          (cmd_demux_001_src19_data),                      //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                   //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),             //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),               //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                     //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                     //           .valid
		.src20_data          (cmd_demux_001_src20_data),                      //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                   //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),             //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket)                //           .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                  //          .channel
		.sink0_data          (cmd_demux_src4_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                  //          .channel
		.sink0_data          (cmd_demux_src5_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                  //          .channel
		.sink0_data          (cmd_demux_src6_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                  //          .channel
		.sink0_data          (cmd_demux_src7_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                  //          .channel
		.sink0_data          (cmd_demux_src8_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                  //          .channel
		.sink0_data          (cmd_demux_src9_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                 //          .channel
		.sink0_data          (cmd_demux_src10_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                 //          .channel
		.sink0_data          (cmd_demux_src11_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                   //          .valid
		.src_data            (cmd_mux_012_src_data),                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                 //          .channel
		.sink0_data          (cmd_demux_src12_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                   //          .valid
		.src_data            (cmd_mux_013_src_data),                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                 //          .channel
		.sink0_data          (cmd_demux_src13_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                   //          .valid
		.src_data            (cmd_mux_014_src_data),                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                 //          .channel
		.sink0_data          (cmd_demux_src14_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                 //          .channel
		.sink0_data          (cmd_demux_src15_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                   //          .valid
		.src_data            (cmd_mux_016_src_data),                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                 //          .channel
		.sink0_data          (cmd_demux_src16_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                   //          .valid
		.src_data            (cmd_mux_017_src_data),                    //          .data
		.src_channel         (cmd_mux_017_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                 //          .channel
		.sink0_data          (cmd_demux_src17_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                   //          .valid
		.src_data            (cmd_mux_018_src_data),                    //          .data
		.src_channel         (cmd_mux_018_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                 //          .channel
		.sink0_data          (cmd_demux_src18_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                   //          .valid
		.src_data            (cmd_mux_019_src_data),                    //          .data
		.src_channel         (cmd_mux_019_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                 //          .channel
		.sink0_data          (cmd_demux_src19_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                   //          .valid
		.src_data            (cmd_mux_020_src_data),                    //          .data
		.src_channel         (cmd_mux_020_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                 //          .channel
		.sink0_data          (cmd_demux_src20_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),               //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),             //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket)          //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                //          .valid
		.src1_data          (rsp_demux_007_src1_data),                 //          .data
		.src1_channel       (rsp_demux_007_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                //          .valid
		.src1_data          (rsp_demux_008_src1_data),                 //          .data
		.src1_channel       (rsp_demux_008_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                //          .valid
		.src1_data          (rsp_demux_009_src1_data),                 //          .data
		.src1_channel       (rsp_demux_009_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                //          .valid
		.src1_data          (rsp_demux_010_src1_data),                 //          .data
		.src1_channel       (rsp_demux_010_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                //          .valid
		.src1_data          (rsp_demux_011_src1_data),                 //          .data
		.src1_channel       (rsp_demux_011_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                //          .valid
		.src1_data          (rsp_demux_012_src1_data),                 //          .data
		.src1_channel       (rsp_demux_012_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                //          .valid
		.src1_data          (rsp_demux_013_src1_data),                 //          .data
		.src1_channel       (rsp_demux_013_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                //          .valid
		.src1_data          (rsp_demux_014_src1_data),                 //          .data
		.src1_channel       (rsp_demux_014_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                //          .valid
		.src1_data          (rsp_demux_015_src1_data),                 //          .data
		.src1_channel       (rsp_demux_015_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                //          .valid
		.src1_data          (rsp_demux_016_src1_data),                 //          .data
		.src1_channel       (rsp_demux_016_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                //          .valid
		.src0_data          (rsp_demux_017_src0_data),                 //          .data
		.src0_channel       (rsp_demux_017_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                //          .valid
		.src1_data          (rsp_demux_017_src1_data),                 //          .data
		.src1_channel       (rsp_demux_017_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                    //      sink.ready
		.sink_channel       (router_020_src_channel),                  //          .channel
		.sink_data          (router_020_src_data),                     //          .data
		.sink_startofpacket (router_020_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_020_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                //          .valid
		.src0_data          (rsp_demux_018_src0_data),                 //          .data
		.src0_channel       (rsp_demux_018_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                //          .valid
		.src1_data          (rsp_demux_018_src1_data),                 //          .data
		.src1_channel       (rsp_demux_018_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                    //      sink.ready
		.sink_channel       (router_021_src_channel),                  //          .channel
		.sink_data          (router_021_src_data),                     //          .data
		.sink_startofpacket (router_021_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_021_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                //          .valid
		.src0_data          (rsp_demux_019_src0_data),                 //          .data
		.src0_channel       (rsp_demux_019_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                //          .valid
		.src1_data          (rsp_demux_019_src1_data),                 //          .data
		.src1_channel       (rsp_demux_019_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                    //      sink.ready
		.sink_channel       (router_022_src_channel),                  //          .channel
		.sink_data          (router_022_src_data),                     //          .data
		.sink_startofpacket (router_022_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_022_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                //          .valid
		.src0_data          (rsp_demux_020_src0_data),                 //          .data
		.src0_channel       (rsp_demux_020_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                //          .valid
		.src1_data          (rsp_demux_020_src1_data),                 //          .data
		.src1_channel       (rsp_demux_020_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_clk_clk),                             //       clk.clk
		.reset                (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                       //       src.ready
		.src_valid            (rsp_mux_src_valid),                       //          .valid
		.src_data             (rsp_mux_src_data),                        //          .data
		.src_channel          (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                  //          .channel
		.sink0_data           (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),              //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),              //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),              //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),              //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                 //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),              //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                 //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),              //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                 //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                 //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),              //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                 //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)           //          .endofpacket
	);

	SM_MCU_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (clk_clk_clk),                             //       clk.clk
		.reset                (CPU_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                   //          .valid
		.src_data             (rsp_mux_001_src_data),                    //          .data
		.src_channel          (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                  //          .channel
		.sink0_data           (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),              //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),              //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),              //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),              //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),              //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),              //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),              //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),              //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                 //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),              //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                 //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),              //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                 //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),              //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                 //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),              //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                 //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),              //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                 //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),              //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                 //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),              //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                 //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),              //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                 //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),              //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                 //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),              //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                 //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (77),
		.OUT_PKT_BURST_SIZE_L          (75),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (79),
		.OUT_PKT_BURST_TYPE_L          (78),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (CPU_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_003_src_valid),                         //      sink.valid
		.in_channel           (router_003_src_channel),                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_003_src_ready),                         //          .ready
		.in_data              (router_003_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_BURSTWRAP_H            (74),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (77),
		.IN_PKT_BURST_SIZE_L           (75),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (79),
		.IN_PKT_BURST_TYPE_L           (78),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (21),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (CPU_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                        //          .ready
		.in_data              (cmd_mux_001_src_data),                         //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

endmodule
